<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>算法题001：求数组可能的最大得分</title>
    <url>/en/2023/09/21/Algorithm-Problem-001-Calculate-Maximum-Possible-Score-of-an-Array/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote>
<p> 题目来源：牛客笔试</p>
</blockquote>
<p>给定一个从 $0$ 开始的数组 $nums$ 和一个非负整数 $k$。</p>
<p>在一次操作中，你可以做以下操作：</p>
<ul>
<li>选择一个之前未选择过的下标 $i$，范围为 $[0, nums.length - 1]$ 。</li>
<li>将 $nums[i]$ 替换为范围 $[nums[i] - k, nums[i] + k]$ 内的任意整数（包含两端）。</li>
</ul>
<p>在应用任意次数的操作后，返回数组 $nums$ 的最大可能分数。</p>
<p>数组<strong>分数</strong>是“数组中最多的重复元素个数”</p>
<p>注意，你<strong>只能</strong>对每个下标应用<strong>一次</strong>操作。</p>
<span id="more"></span>



<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="number">4</span><span class="punctuation">,</span><span class="number">6</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>在这个示例中，我们进行了以下操作：</p>
<ul>
<li>选择下标1，将其替换为4（范围为[4, 8]），nums &#x3D; [4,4,1,2]。</li>
<li>选择下标3，将其替换为4（范围为[0, 4]），nums &#x3D; [4,4,1,4]。</li>
</ul>
<p>应用这些操作后，数组 nums 的得分为3（由下标 0、1 和 3 组成的子序列）。可以证明，3 是我们可以达到的最大可能长度。</p>
<h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><p>输入：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>在这个示例中，我们无需执行任何操作。</p>
<p>数组nums的得分是4（整个数组）。</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="重新读题"><a href="#重新读题" class="headerlink" title="重新读题"></a>重新读题</h2><p>题目的表述有一股浓重的机翻味，我们不妨重新表述一下：</p>
<p>给定一个数组 $nums$ 和一个自然数 $k$</p>
<p>对于任意下标 $i$，我们可以将该元素 $nums[i]$ 替换为 $[nums[i] - k, nums[i] + k]$ 中的任意整数。一个下标只能操作一次，也可以不操作。</p>
<p>返回任意次操作后，$nums$ 中最大可能的重复元素数量。</p>
<h2 id="观察1：排序"><a href="#观察1：排序" class="headerlink" title="观察1：排序"></a>观察1：排序</h2><p>为了得到尽可能多的重复元素，我们需要地将<strong>大小接近</strong>的元素进行操作，使它们的值相等。</p>
<p>如何找出大小接近的元素呢？—— 排序</p>
<h2 id="观察2：找规律"><a href="#观察2：找规律" class="headerlink" title="观察2：找规律"></a>观察2：找规律</h2><p>假设在排序后，我们试图使区间 $[i, j]$内的元素在操作后的值相等。那么此时 $i$ 和 $j$ 需要满足什么条件呢？</p>
<ul>
<li>在排序后，已知 $nums[i] \le nums[i + 1] \le … \le nums[j - 1] \le nums[j]$</li>
<li>$nums[i]$ 的替换范围是 $[nums[i] - k, nums[i] + k]$ ；$nums[j]$ 的替换范围是 $[nums[j] - k, nums[j] + k]$ </li>
<li>则 $nums[i] + k \ge nums[j] - k$</li>
<li>化简，得到  <strong>$0 \le nums[j] - nums[i] \le 2k$</strong></li>
</ul>
<p>可以看出，当 $i$ 固定时，为了尽可能使区间范围 $j - i + 1$ 变大，我们需要找到一个 $j$ ，使得 $nums[j] - nums[i]$ 尽可能地接近 $2k$。此时的区间范围 $j - i + 1$才有可能是我们想要的答案。</p>
<h2 id="观察3：滑动窗口"><a href="#观察3：滑动窗口" class="headerlink" title="观察3：滑动窗口"></a>观察3：滑动窗口</h2><p>经过我们的分析，这道题变成了：</p>
<ul>
<li>对于一个有序数组 $nums$，和一个自然数 $k$</li>
<li>当下标 $i$ 固定，我们需要找到一个尽可能大的下标 $j$，并且满足 $0 \le nums[j] - nums[i] \le 2k$</li>
<li>在所有满足条件的区间 $[i, j]$ 中，最大的 $j - i + 1$ 即为答案</li>
</ul>
<p>那么，使用<strong>滑动窗口</strong>算法能够将暴力遍历的时间复杂度从 $O(n^2)$ 降低到 $O(n)$</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumScore</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line"></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sliding window</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; n &amp;&amp; nums[j] &lt;= nums[i] + <span class="number">2</span> * k) j++;</span><br><span class="line">            ans = Math.max(ans, j - i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>排序</tag>
        <tag>滑动窗口</tag>
      </tags>
  </entry>
  <entry>
    <title>算法题002：螺旋矩阵 II</title>
    <url>/en/2023/10/03/Algorithm-Problem-002-spiral-matrix-ii/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote>
<p>题目来源：<a href="https://leetcode.cn/problems/spiral-matrix-ii/">59. 螺旋矩阵 II</a></p>
</blockquote>
<p>给你一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 <code>n^2</code> 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code> 。</p>
<span id="more"></span>


<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h2><p>输入：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>输出：</p>
<p><img src="/en/MarkDownImages/spiraln.jpg" alt="img"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="punctuation">[</span><span class="number">8</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="punctuation">[</span><span class="number">7</span><span class="punctuation">,</span><span class="number">6</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h2><p>输入：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>



<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这道题是一道典型的模拟题，我们需要按照遍历整个矩阵。</p>
<h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路 1"></a>思路 1</h2><p>我自己的做法是将矩阵分层（<code>layer</code>），一层一层地遍历。比如，当 $n &#x3D; 3$ 时，矩阵为</p>
<p> <img src="/en/MarkDownImages/spiraln.jpg" alt="img"></p>
<p>此时，我们定义第一层为 <code>layer = 0</code>，包含数字 1 - 8；第二层为 <code>layer = 1</code>，包含数字 9；</p>
<p>遍历每一层时，依次编写向右（1、2）、向下（3、4）、向左（5、6）、向右（7、8）的循环代码</p>
<p>这种方法的重点在于找数学规律，找到 <code>layer</code> 和当前遍历的某一行&#x2F;某一列的大小关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span>[][] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">layer</span> <span class="operator">=</span> <span class="number">0</span>; layer &lt;= n / <span class="number">2</span>; layer++) &#123;</span><br><span class="line">            <span class="comment">// 向右</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> layer; j &lt; n - layer - <span class="number">1</span>; ++j, ++counter) &#123;</span><br><span class="line">                ans[layer][j] = counter;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 向下</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> layer; i &lt; n - layer - <span class="number">1</span>; ++i, ++counter) &#123;</span><br><span class="line">                ans[i][n - layer - <span class="number">1</span>] = counter;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 向左</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n - layer - <span class="number">1</span>; j &gt; layer; --j, ++counter) &#123;</span><br><span class="line">                ans[n - layer - <span class="number">1</span>][j] = counter;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 向上</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - layer - <span class="number">1</span>; i &gt; layer; --i, ++counter) &#123;</span><br><span class="line">                ans[i][layer] = counter;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对于边长为奇数的方阵，中心元素需要手动处理</span></span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            ans[n / <span class="number">2</span>][n / <span class="number">2</span>] = counter;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>显然，这种做法很容易错，毕竟找规律挺无聊的。</strong></p>
<p>力扣上的几位大佬，提供了一种不需要找规律的解法，比如 <a href="https://leetcode.cn/problems/spiral-matrix-ii/solutions/12594/spiral-matrix-ii-mo-ni-fa-she-ding-bian-jie-qing-x/">Krahets 的题解</a>：手动地控制上下左右四个边界，当遍历到边界时，就到头了，向下一个方向开始遍历。</p>
<h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路 2"></a>思路 2</h2><p>由于我们要生成一个矩阵（<strong>非常规则</strong>的图形），我们往往会从<strong>宏观</strong>的角度控制遍历，即思路 1。所谓宏观，即知道全局，它体现在我的解法的找数学规律，也体现在大佬的解法的控制四个边界。</p>
<p>那我们不妨从<strong>微观</strong>角度出发：假如我们自己站在一个<strong>巨大的、看不到边界的</strong>棋盘上，要去填入这些数字，我们会怎么填？我们<strong>只能看到四周的格子</strong>上的数字。此时，宏观的方法不再奏效，我们应该怎么做？</p>
<p><img src="/en/MarkDownImages/spiraln.jpg" alt="img"></p>
<p>假设我们站在格子 1 上（面朝右），往前走，边走边写数字。当走到了格子 3，发现前面无路可走。因为要顺时针填入数字，我们不妨右拐（面朝下），此时面向的格子，就是要填入数字 4 的格子。</p>
<p>同理，当我们走到了格子 8（面朝上），此时前面的格子已经填入了数字 1。我们再次右拐（面朝右），此时面向的格子，就是要填入数字 9 的格子。</p>
<p>因此，在代码中，我们不妨<strong>只关心 agent 当前的坐标</strong>，让他<strong>认准一个方向一直走</strong>，直到遇到边界、或者已经填入了数字，<strong>此时右拐即可</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span>[][] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="comment">// (dx[k], dy[k]) 表示移动的方向，按照轮询的顺序，依次是向右、向下、向左、向上、向右 ...</span></span><br><span class="line">        <span class="type">int</span>[] dx = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] dy = &#123;<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// (x, y) 是 agent 的坐标;</span></span><br><span class="line">        <span class="comment">// dir 表示当前移动的方向，是 dx, dy 数组的索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>, y = <span class="number">0</span>, dir = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 循环变量，以及循环退出条件</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">1</span>, limit = n * n;</span><br><span class="line">        <span class="keyword">while</span> (counter &lt;= limit) &#123;</span><br><span class="line">            <span class="comment">// 当前坐标在边界内，同时当前格子没有填入数字</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="number">0</span> &lt;= x &amp;&amp; x &lt; n &amp;&amp; <span class="number">0</span> &lt;= y &amp;&amp; y &lt; n &amp;&amp; ans[x][y] == <span class="number">0</span>) &#123;</span><br><span class="line">                ans[x][y] = counter;</span><br><span class="line">                counter++;</span><br><span class="line">                <span class="comment">// 继续走</span></span><br><span class="line">                x += dx[dir];</span><br><span class="line">                y += dy[dir];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 回撤一步</span></span><br><span class="line">            x -= dx[dir];</span><br><span class="line">            y -= dy[dir];</span><br><span class="line">            <span class="comment">// 向右转</span></span><br><span class="line">            dir = (dir + <span class="number">1</span>) % dx.length;</span><br><span class="line">            <span class="comment">// 往前一步后，位置 (x, y) 即为下一轮 while 循环要处理的第一个格子</span></span><br><span class="line">            x += dx[dir];</span><br><span class="line">            y += dy[dir];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>我会想出思路 2，是因为我最近做了一道算法题，它要求我顺时针地给一个边长为 <code>n</code> 的等腰直角三角形（直角边平行于坐标轴）填入数字。</p>
<p>比如，当 <code>n = 4</code> 时，要按如下的方式填入数字：</p>
<img src="/MarkDownImages/image-20231003171918667.png" alt="image-20231003171918667" style="zoom:67%;" />

<p>按照思路 1 的解法，从宏观层面找规律，我根本懒得找，想想就麻烦。如果按照大佬们的边界法，斜边遍历的代码（ $x + y \le k$ ），又何尝不是一种找规律？</p>
<p>按照思路 2，所谓顺时针，其实就是轮询这几个方向：向上、向右下、向左。那么，在代码层面就是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] dx = &#123;-<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] dy = &#123;<span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>改一改思路 2 的代码即可。</p>
]]></content>
      <categories>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>模拟</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>算法题003：对角线遍历 II</title>
    <url>/en/2023/10/29/Algorithm-Problem-003-diagonal-traverse-ii/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote>
<p>题目来源：<a href="https://leetcode.cn/problems/diagonal-traverse-ii/">1424. 对角线遍历 II</a></p>
</blockquote>
<p>给你一个列表 <code>nums</code> ，里面每一个元素都是一个整数列表。请你依照下面各图的规则，按顺序返回 <code>nums</code> 中对角线上的整数。</p>
<h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h2><p><img src="/en/MarkDownImages/image-20231029115351760.png" alt="image-20231029115351760"></p>
<blockquote>
<p>输入：nums &#x3D; <code>[[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]</code><br>输出：<code>[1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]</code></p>
</blockquote>
<span id="more"></span>

<h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h2><p><img src="/en/MarkDownImages/image-20231029115127660.png" alt="image-20231029115127660"></p>
<blockquote>
<p>输入：nums &#x3D; <code>[[1,2,3],[4,5,6],[7,8,9]]</code><br>输出：<code>[1,4,2,7,5,3,8,6,9]</code></p>
</blockquote>
<h2 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3"></a>示例 3</h2><blockquote>
<p>输入：nums &#x3D; <code>[[1,2,3],[4],[5,6,7],[8],[9,10,11]]</code><br>输出：<code>[1,4,2,5,3,8,6,9,7,10,11]</code></p>
</blockquote>
<h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><ul>
<li><code>1 &lt;= nums.length &lt;= 10^5</code></li>
<li><code>1 &lt;= nums[i].length &lt;= 10^5</code></li>
<li><code>1 &lt;= nums[i][j] &lt;= 10^9</code></li>
<li><code>nums</code> 中最多有 <code>10^5</code> 个数字。</li>
</ul>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>对于自然数 $k \in \mathbb{N}$，第 $k + 1$ 条对角线上的元素坐标为 $\set{(i,j) | i + j &#x3D; k}$。例如，当 $k &#x3D; 2$ 时，第 $3$ 条对角线的元素坐标是 $\set{(0,2),(1,1),(2,0)}$</p>
<p>如果 <code>nums</code> 是个矩阵，那这题是一道简单模拟题，按照对角线遍历即可，时间复杂度为 $O(mn)$。</p>
<p>但是，<code>nums</code> 的行数 $m \le 10^5$，列数 $n \le 10^5$，$O(mn)$ 的时间复杂度会超时。因此，我们不应该把 <code>nums</code> 当作一个矩阵来遍历，否则会访问大量的空格子。</p>
<p>观察示例1：</p>
<p><img src="/en/MarkDownImages/image-20231029115351760.png" alt="image-20231029115351760"></p>
<p>观察1️⃣：对于任意的 $k \in \mathbb{N}$，第 $k + 1$ 条对角线的元素遍历顺序是从左下到右上，即 $(k, 0), (k - 1,1),\cdots,(0,k)$。因此，如果我们要获得第 $k + 1$ 条对角线上的元素，我们应该<strong>倒序遍历</strong> <code>nums</code> 中每一行的对应元素。</p>
<p>观察2️⃣：易得，对于<code>nums</code>中的每一行 <code>nums[j]</code>，其中的元素都属于不同的对角线，因此是<strong>相互独立</strong>的。</p>
<p>观察3️⃣：<strong>倒序遍历</strong> <code>nums</code> 中每一行时：</p>
<ul>
<li>对于<strong>最后一行</strong>的元素 $12,13,14,15,16$，它们都是自己对角线上的<strong>第一个</strong>元素，尽管后 4 个元素所属的对角线在第一列上不存在元素。</li>
<li>对于<strong>倒数第二行</strong>的元素 $9,10,11$，它们都是所属对角线的<strong>下一个</strong>应该遍历的元素</li>
<li>以此类推……</li>
</ul>
<p>我们的目标是要收集 <code>nums</code> 中的所有元素，收集方式是按照对角线元素顺序收集。</p>
<p>因此，我们可以先为每个对角线创建一个 list，将对应元素放入该 list 中。然后再正序遍历每个对角线 list，获得最终的结果。如果这样做，我们需要首先创建 <code>m + n - 1</code> 个 list。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums.size();</span><br><span class="line"><span class="comment">// n 为最大列数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.stream().mapToInt(List::size).max().getAsInt();</span><br><span class="line"><span class="comment">// ans 中存放 m + n - 1 个 list，代表各个对角线中遍历到的元素</span></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">IntStream.range(<span class="number">0</span>, m + n - <span class="number">1</span>).forEach(i -&gt; ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 核心：如何遍历？？？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正序收集 ans 中每行的元素</span></span><br><span class="line"><span class="keyword">return</span> ans.stream().flatMap(l -&gt; l.stream()).mapToInt(i -&gt; i).toArray();</span><br></pre></td></tr></table></figure>

<p>那么如何遍历呢？为了不超时，肯定是按照行遍历。</p>
<ul>
<li>根据『观察1️⃣』，倒序遍历 <code>nums</code> ；</li>
<li>根据『观察2️⃣』，对于每一行，每遍历到一个元素 <code>nums[i][j]</code>，就把它放入第 $i+j + 1$ 个 list 中</li>
<li>根据『观察3️⃣』，上述元素 <code>nums[i][j]</code> 应该添加到对应 list 最后。因为前 $n - i - 1$ 行（$n -1,n - 2 ,\cdots, i + 1$）中该对角线上的元素已经遍历过了，并且它们已经按照同样的方法、有序存放在该 list 中了—— 使用递归或者数学归纳法证明</li>
</ul>
<p>代码是简单的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 倒序遍历 nums</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    List&lt;Integer&gt; row = nums.get(i);</span><br><span class="line">    <span class="comment">// 每遍历到一个元素 nums[i][j]，就把它放入第 i + j + 1 个 list 中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; row.size(); j++) &#123;</span><br><span class="line">        ans.get(i + j).add(row.get(j));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>时间复杂度是 $O(m + n + \text{(nums 元素个数)})$</p>
<p>空间复杂度是 $O(m+n)$</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findDiagonalOrder(List&lt;List&lt;Integer&gt;&gt; nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums.size();</span><br><span class="line">        <span class="comment">// n 为最大列数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.stream().mapToInt(List::size).max().getAsInt();</span><br><span class="line">        <span class="comment">// ans 中存放 m + n - 1 个 list，代表各个对角线中遍历到的元素</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        IntStream.range(<span class="number">0</span>, m + n - <span class="number">1</span>).forEach(i -&gt; ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 倒序遍历 nums</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            List&lt;Integer&gt; row = nums.get(i);</span><br><span class="line">            <span class="comment">// 每遍历到一个元素 nums[i][j]，就把它放入第 i + j + 1 个 list 中</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; row.size(); j++) &#123;</span><br><span class="line">                ans.get(i + j).add(row.get(j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 正序收集 ans 中每行的元素</span></span><br><span class="line">        <span class="keyword">return</span> ans.stream().flatMap(l -&gt; l.stream()).mapToInt(i -&gt; i).toArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>模拟</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Problem 004: Maximum Employees to Be Invited to a Meeting</title>
    <url>/en/2023/11/01/Algorithm-Problem-004-maximum-employees-to-be-invited-to-a-meeting/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><blockquote>
<p>Source: <a href="https://leetcode.cn/problems/maximum-employees-to-be-invited-to-a-meeting/">2127. Maximum Employees to Be Invited to a Meeting</a> (Daily Problem)</p>
</blockquote>
<p>A company is organizing a meeting and has a list of <code>n</code> employees, waiting to be invited. They have arranged for a large <strong>circular</strong> table, capable of seating <strong>any number</strong> of employees.</p>
<p>The employees are numbered from <code>0</code> to <code>n - 1</code>. Each employee has a <strong>favorite</strong> person and they will attend the meeting <strong>only if</strong> they can sit next to their favorite person at the table. The favorite person of an employee is <strong>not</strong> themselves.</p>
<p>Given a <strong>0-indexed</strong> integer array <code>favorite</code>, where <code>favorite[i]</code> denotes the favorite person of the <code>ith</code> employee, return <em>the <strong>maximum number of employees</strong> that can be invited to the meeting</em>.</p>
<h2 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h2><blockquote>
<p>Input: favorite &#x3D; [2,2,1,2]<br>Output: 3</p>
</blockquote>
<p><img src="/MarkDownImages/image-20231101114926490.png" alt="image-20231101114926490" style="zoom:65%;" /><img src="/MarkDownImages/image-20231101125447756-16988146128191.png" alt="image-20231101125447756" style="zoom:35%;" /></p>
<span id="more"></span>

<h2 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h2><blockquote>
<p>Input: favorite &#x3D; [1,2,0]<br>Output: 3</p>
</blockquote>
<p><img src="/en/MarkDownImages/image-20231101115048286.png" alt="image-20231101115048286"></p>
<h2 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h2><blockquote>
<p>Input: favorite &#x3D; [3,0,1,4,1]<br>Output: 4</p>
</blockquote>
<p><img src="/MarkDownImages/image-20231101115200232.png" alt="image-20231101115200232" style="zoom:65%;" /><img src="/MarkDownImages/image-20231101125539019.png" alt="image-20231101125539019" style="zoom:33%;" /></p>
<h1 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h1><p>By the definition of <code>favorite</code>, if we consider each employee as a node pointing to their favorite employee, we form a <strong>directed cyclic graph</strong> with <code>n</code> edges, <code>n</code> nodes, and each node having an out-degree of 1.</p>
<p>Observing Examples 2 and 3, the employees attending the circular table meeting must form a cycle. This is because each node has an out-degree of 1, and an employee must sit next to his favorite employee. Therefore, the maximum number of employees attending the meeting is equal to the <strong>length of the longest cycle</strong> (Conclusion 1️⃣).</p>
<p>Conclusion 1️⃣ can also be argued in reverse:</p>
<p>In Example 3, node 2 cannot attend the meeting because inserting this employee at any position on the circular table breaks the existing cycle. For instance, if we insert 2 between 0 and 1, then the neighbors of 1 become 2 and 4, neither of which is the favorite employee, violating the conditions.</p>
<p>Hence, the graph formed by employees able to attend the meeting must be a cycle, and there cannot be any other node chains (linked lists) pointing to a node within the cycle.</p>
<p>As shown in the diagram below, the answer is $\set{0,1,2,3}$ and it cannot include $\set{7,8}$ and $\set{4,5,6}$.</p>
<img src="/MarkDownImages/image-20231101132810263.png" alt="image-20231101132810263" style="zoom: 50%;" />

<p><strong>However</strong>, for <strong>cycles of length 2</strong> (two nodes pointing to each other), as long as the two employees sit together, the cycle cannot be broken. Therefore, cycles of length 2 need to be <strong>specially handled</strong>. In Example 1, nodes 1 and 2 form a cycle, and in this case, an additional employee can be added to the circular table.</p>
<p>Observing the following example:</p>
<img src="/MarkDownImages/image-20231101133700388.png" alt="image-20231101133700388" style="zoom:50%;" />

<p>Nodes 0 and 1 form a cycle of length 2, and the node chain $(3,2)$ points to 0, while the node chain $(5,4),(6)$ points to 1. The employees on the circular table in order should be $3,2,0,1,4,5$. That is, <strong>for every node in the cycle (2 nodes in total), add its longest node chain to the result set</strong> (Conclusion 2️⃣). Therefore, we choose $(5,4)$ instead of $(6)$.</p>
<p>Note that the graph may have multiple connected components. We need to adjust the two conclusions above:</p>
<ul>
<li>For cycles of length greater than 2, the entire circular table must belong to the nodes within the cycle, and no other nodes are allowed. Therefore, when there are multiple cycles, choose the one with the maximum length as the result.</li>
<li>For cycles of length 2, the condition that each employee ‘will attend the meeting only if they can sit next to their favorite person at the table’ is satisfied by the cycle itself, not by occupying the entire circular table. Therefore, <strong>the final result is the union of all result sets satisfying ‘Conclusion 2️⃣’</strong>. If employees in one result set sit together, then <strong>all result sets can coexist</strong>.</li>
</ul>
<p>Observing the example below, the answer is three cycles of length 2 and their extended node chains, totaling 8 nodes. The remaining connected component is a cycle of length 4.</p>
<img src="/MarkDownImages/image-20231101134045195.png" alt="image-20231101134045195" style="zoom: 50%;" />

<h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p>Based on the conclusions we drew earlier, the following information needs to be calculated in the code:</p>
<ul>
<li>The lengths of various cycles</li>
<li>The maximum length of the node chain for every node in cycles of length 2</li>
</ul>
<h2 id="How-to-Find-Cycles-in-the-Graph"><a href="#How-to-Find-Cycles-in-the-Graph" class="headerlink" title="How to Find Cycles in the Graph?"></a>How to Find Cycles in the Graph?</h2><p>Use topological sorting. Since this is a directed graph with <strong>$n$ edges, $n$ nodes, and each node’s out-degree is 1</strong>, nodes that cannot be visited during topological sorting must be part of a cycle.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> favorite.length;</span><br><span class="line"><span class="type">int</span>[] inDegree = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">ArrayDeque&lt;Integer&gt; que = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"><span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    inDegree[favorite[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (inDegree[i] == <span class="number">0</span>) &#123;</span><br><span class="line">        que.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> que.pollFirst();</span><br><span class="line">    visited[cur] = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> favorite[cur];</span><br><span class="line"></span><br><span class="line">    inDegree[next]--;</span><br><span class="line">    <span class="keyword">if</span> (inDegree[next] == <span class="number">0</span>) &#123;</span><br><span class="line">        que.addLast(next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// At this point, all non-cycle nodes have been traversed and marked as visited</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">maxCircleSize</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (visited[i]) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="comment">// circle collects all nodes in the current cycle</span></span><br><span class="line">    ArrayList&lt;Integer&gt; circle = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> i;</span><br><span class="line">    <span class="keyword">while</span> (!visited[cur]) &#123;</span><br><span class="line">        circle.add(cur);</span><br><span class="line">        visited[cur] = <span class="literal">true</span>;</span><br><span class="line">        cur = favorite[cur];</span><br><span class="line">    &#125;</span><br><span class="line">    maxCircleSize = Math.max(maxCircleSize, circle.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="How-to-Count-Node-Chains"><a href="#How-to-Count-Node-Chains" class="headerlink" title="How to Count Node Chains?"></a>How to Count Node Chains?</h2><p>Node chains are single-linked lists that do not belong to a cycle. The list starts from a node with an in-degree of 0 and points to a node within a cycle. We can define a <code>pathLen</code> array,<br>where <code>pathLen[i]</code> represents <strong>the length of the longest node chain pointing to node <code>i</code></strong>.</p>
<p>Since topological sorting continuously traverses nodes with a current in-degree of 0, if node a points to b, then a will be visited first. If the node chain for a is already calculated, we can easily calculate the node chain for b:</p>
<p>$pathLen[b] &#x3D; \max\limits_{(a,b)\in E}\set{1 + pathLen[a]}$</p>
<p>Therefore, we can calculate <code>pathLen</code> during topological sorting:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Initialized to 0</span></span><br><span class="line"><span class="type">int</span>[] pathLen = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> que.pollFirst();</span><br><span class="line">    visited[cur] = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> favorite[cur];</span><br><span class="line">    <span class="comment">// Update pathLen here</span></span><br><span class="line">    pathLen[next] = Math.max(pathLen[next], pathLen[cur] + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    inDegree[next]--;</span><br><span class="line">    <span class="keyword">if</span> (inDegree[next] == <span class="number">0</span>) &#123;</span><br><span class="line">        que.addLast(next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Final-Code"><a href="#Final-Code" class="headerlink" title="Final Code"></a>Final Code</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumInvitations</span><span class="params">(<span class="type">int</span>[] favorite)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> favorite.length;</span><br><span class="line">        <span class="type">int</span>[] inDegree = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span>[] pathLen = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        ArrayDeque&lt;Integer&gt; que = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Topological sorting</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            inDegree[favorite[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inDegree[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                que.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> que.pollFirst();</span><br><span class="line">            visited[cur] = <span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> favorite[cur];</span><br><span class="line">            pathLen[next] = Math.max(pathLen[next], pathLen[cur] + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            inDegree[next]--;</span><br><span class="line">            <span class="keyword">if</span> (inDegree[next] == <span class="number">0</span>) &#123;</span><br><span class="line">                que.addLast(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Topological sorting is complete, </span></span><br><span class="line">        <span class="comment">// all non-cycle nodes have been traversed and marked as visited</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Maximum cycle length</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxCircleLength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// The size of the union of all result sets satisfying &#x27;Conclusion 2️⃣&#x27;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">twoCirclePath</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start finding cycles</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// circle collects all nodes in the current cycle</span></span><br><span class="line">            ArrayList&lt;Integer&gt; circle = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">while</span> (!visited[cur]) &#123;</span><br><span class="line">                circle.add(cur);</span><br><span class="line">                visited[cur] = <span class="literal">true</span>;</span><br><span class="line">                cur = favorite[cur];</span><br><span class="line">            &#125;</span><br><span class="line">            maxCircleLength = Math.max(maxCircleLength, circle.size());</span><br><span class="line">            <span class="keyword">if</span> (circle.size() == <span class="number">2</span>) &#123;</span><br><span class="line">                twoCirclePath += pathLen[circle.get(<span class="number">0</span>)] + pathLen[circle.get(<span class="number">1</span>)] + <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(maxCircleLength, twoCirclePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Algorithm Problems</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>Topological Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Problem 005: Maximum Balanced Subsequence Sum</title>
    <url>/en/2023/11/06/Algorithm-Problem-005-maximum-balanced-subsequence-sum/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><blockquote>
<p>Problem Source: <a href="https://leetcode.cn/problems/maximum-balanced-subsequence-sum/">2926. Maximum Balanced Subsequence Sum</a></p>
<p>This article is an analysis of the solution to the last problem in <a href="/en/2023/11/05/leetcode-370-weekly-contest-summary/">LeetCode Weekly Contest 370</a>, which I failed to solve. The solution refers to <a href="https://leetcode.cn/problems/maximum-balanced-subsequence-sum/solutions/2513121/shu-zhuang-shu-zu-you-hua-dp-by-endlessc-3zf4/">the article by endlesscheng</a>。</p>
</blockquote>
<span id="more"></span>



<blockquote>
<p><strong>Problem Description:</strong></p>
<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>.</p>
<p>A <strong>subsequence</strong> of <code>nums</code> having length <code>k</code> and consisting of <strong>indices</strong> <code>i0 &lt; i1 &lt; ... &lt; ik-1</code> is <strong>balanced</strong> if the following holds:</p>
<ul>
<li><code>nums[ij] - nums[ij-1] &gt;= ij - ij-1</code>, for every <code>j</code> in the range <code>[1, k - 1]</code>.</li>
</ul>
<p>A <strong>subsequence</strong> of <code>nums</code> having length <code>1</code> is considered balanced.</p>
<p>Return <em>an integer denoting the <strong>maximum</strong> possible <strong>sum of elements</strong> in a <strong>balanced</strong> subsequence of</em> <code>nums</code>.</p>
<p>A <strong>subsequence</strong> of an array is a new <strong>non-empty</strong> array that is formed from the original array by deleting some (<strong>possibly none</strong>) of the elements without disturbing the relative positions of the remaining elements.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,3,5,6]</span><br><span class="line">Output: 14</span><br><span class="line">Explanation: In this example, the subsequence [3,5,6] consisting of indices 0, 2, and 3 can be selected.</span><br><span class="line">nums[2] - nums[0] &gt;= 2 - 0.</span><br><span class="line">nums[3] - nums[2] &gt;= 3 - 2.</span><br><span class="line">Hence, it is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.</span><br><span class="line">The subsequence consisting of indices 1, 2, and 3 is also valid.</span><br><span class="line">It can be shown that it is not possible to get a balanced subsequence with a sum greater than 14.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [5,-1,-3,8]</span><br><span class="line">Output: 13</span><br><span class="line">Explanation: In this example, the subsequence [5,8] consisting of indices 0 and 3 can be selected.</span><br><span class="line">nums[3] - nums[0] &gt;= 3 - 0.</span><br><span class="line">Hence, it is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.</span><br><span class="line">It can be shown that it is not possible to get a balanced subsequence with a sum greater than 13.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [-2,-1]</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: In this example, the subsequence [-1] can be selected.</span><br><span class="line">It is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 105</code></li>
<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>
</ul>
</blockquote>
<h1 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h1><h2 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h2><p>Let’s change the formulation of the problem: consecutive elements <code>nums[i]</code> and <code>nums[j]</code> in a balanced subsequence must satisfy $i &lt; j$ and $nums[j] - nums[i] \ge j - i$.</p>
<p>By rearranging the inequality above, we get $nums[j] - j \ge nums[i] - i$.</p>
<p>Let $b[i] &#x3D; nums[i] - i$, then the requirement for each element in a balanced subsequence only depends on its own value and index, not those of other elements.</p>
<p>Therefore, this problem is similar to the Longest Increasing Subsequence, and we can solve it using DP:</p>
<p>DP Definition: <code>dp[j]</code> represents the maximum sum of elements in a <strong>balanced</strong> subsequence ending at <code>nums[j]</code>.</p>
<p>Recurrence relation: $dp[j] &#x3D; nums[j] + \max\set{dp[i] | (i &lt; j) ∧ (b[j] \ge b[i])}$</p>
<p>Code：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maxBalancedSubsequenceSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="comment">// b[i] = nums[i] - i</span></span><br><span class="line">        <span class="type">int</span>[] b = IntStream.range(<span class="number">0</span>, n).map(i -&gt; nums[i] - i).toArray();</span><br><span class="line">        <span class="comment">// dp[i]: maximum sum of elements in a subsequence ending at nums[i]</span></span><br><span class="line">        <span class="type">long</span>[] dp = <span class="keyword">new</span> <span class="title class_">long</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            dp[j] = nums[j];</span><br><span class="line">            <span class="type">long</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; j; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (b[j] &gt;= b[i])</span><br><span class="line">                    max = Math.max(max, dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            dp[j] += max;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(dp).max().getAsLong();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Clearly, the time complexity of the above code is $O(n^2)$ due to the nested loops, and it is likely to time out. How can we improve?</p>
<h2 id="Binary-Indexed-Tree-BIT"><a href="#Binary-Indexed-Tree-BIT" class="headerlink" title="Binary Indexed Tree (BIT)"></a>Binary Indexed Tree (BIT)</h2><p>Based on the recurrence relation above, our code logic should be as follows:</p>
<ul>
<li>For each $j$,</li>
<li>Traverse the interval $[0, j)$ and find the index $i$ that satisfies $b[j] \ge b[i]$ and maximizes $dp[i]$, which is a range query for the maximum value.</li>
<li>Set $dp[j] &#x3D; nums[j] + dp[i]$, which is a point update.</li>
</ul>
<p>We need the time complexity of “range query” + “point update” to be strictly less than $O(n)$ to avoid time-outs. The Binary Indexed Tree (BIT) fits this requirement.</p>
<blockquote>
<p>Initially, I thought BIT was only suitable for range sum queries (for optimizing difference arrays), but this problem shows that range queries can also extend to minimum and maximum values.</p>
</blockquote>
<p>The values stored in the BIT are key-value pairs <code>&lt;b[j], dp[j]&gt;</code>, where <code>b[j]</code> is the index and <code>dp[j]</code> is the array element. To query the maximum value of elements whose indices $\le b[j]$, we are essentially querying the maximum value of a prefix interval.</p>
<p>Code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">BIT</span> &#123;</span><br><span class="line">        <span class="type">long</span>[] arr;</span><br><span class="line">        <span class="type">int</span> offset;</span><br><span class="line"></span><br><span class="line">        BIT(<span class="type">int</span> min, <span class="type">int</span> max) &#123;</span><br><span class="line">            <span class="comment">// Move the interval [min, max] to start from 0</span></span><br><span class="line">            offset = -min;</span><br><span class="line">            <span class="comment">// Leave index 0 of BIT empty, so the interval starts from 1</span></span><br><span class="line">            offset++;</span><br><span class="line">            arr = <span class="keyword">new</span> <span class="title class_">long</span>[max - min + <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">lsb</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> i &amp; -i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">setMax</span><span class="params">(<span class="type">int</span> i, <span class="type">long</span> val)</span> &#123;</span><br><span class="line">            i += offset;</span><br><span class="line">            <span class="comment">// Index i affects all subsequent intervals, so we add lsb</span></span><br><span class="line">            <span class="keyword">for</span> (; i &lt; arr.length; i += lsb(i)) &#123;</span><br><span class="line">                arr[i] = Math.max(arr[i], val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">            i += offset;</span><br><span class="line">            <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> Long.MIN_VALUE;</span><br><span class="line">            <span class="comment">// Prefix interval, so we subtract lsb</span></span><br><span class="line">            <span class="keyword">for</span> (; i &gt; <span class="number">0</span>; i -= lsb(i)) &#123;</span><br><span class="line">                ans = Math.max(ans, arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maxBalancedSubsequenceSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="comment">// b[i] = nums[i] - i</span></span><br><span class="line">        <span class="type">int</span>[] b = IntStream.range(<span class="number">0</span>, n).map(i -&gt; nums[i] - i).toArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Arrays.stream(b).max().getAsInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Arrays.stream(b).min().getAsInt();</span><br><span class="line">        <span class="comment">// Customize the size of BIT#arr based on the range of elements in b</span></span><br><span class="line">        <span class="type">BIT</span> <span class="variable">tree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BIT</span>(min, max);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> Long.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="comment">// Range query for the maximum value</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">dp_i</span> <span class="operator">=</span> Math.max(tree.getMax(b[j]), <span class="number">0</span>);</span><br><span class="line">            <span class="comment">// Point update</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">dp_j</span> <span class="operator">=</span> dp_i + nums[j];</span><br><span class="line">            tree.setMax(b[j], dp_j);</span><br><span class="line"></span><br><span class="line">            ans = Math.max(ans, dp_j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Submit this code:</p>
<p><img src="/en/MarkDownImages/image-20231106113338051.png" alt="image-20231106113338051"></p>
<p>We got an OOM.</p>
<p>Note the data range of the problem: $n \le 10^5$ ，$nums[i] \in[-10^9,10^9]$</p>
<p>Therefore, the range of values for <code>b[i]</code> is approximately equal to the range of 32-bit integers, i.e., $2^{32}$, which will result in an Out Of Memory (OOM) error when creating <code>BIT#arr</code>. How can we optimize the space?</p>
<h2 id="Discretization"><a href="#Discretization" class="headerlink" title="Discretization"></a>Discretization</h2><blockquote>
<p>Reference to <a href="https://oi-wiki.org/misc/discrete/">OI-wiki</a>: </p>
<p>Discretization is a data processing technique, essentially a form of hashing, that ensures that data remains in its original full&#x2F;partial order after hashing.</p>
<p>In simple terms, when <strong>some data</strong> is too large or of a type that <strong>does not support using it as an array index</strong> conveniently, and <strong>only the relative size relationship</strong> between elements <strong>affects the final result</strong>, we can process the problem by treating the data <strong>based on their ranking</strong>, i.e., discretization.</p>
</blockquote>
<p>Let’s combine the concept with the problem:</p>
<ul>
<li>We want to query the maximum value of all indices $\le b[j]$ —— there are $2^{32}$ possible values for <code>b[j]</code>.</li>
<li>However, the array <code>b</code> only has <code>n</code> elements.</li>
<li>Assume that <code>b[j]</code> is the $k$-th smallest element after sorting; then, we only need to query the maximum value among the first $k - 1$ elements smaller than <code>b[j]</code>.</li>
<li>Therefore, the length of <code>BIT#arr</code> is also <code>n</code>, and $n \ll 2^{32}$.</li>
<li>If we know the index <code>k</code> where <code>b[j]</code> is located after sorting, the operation ‘query the maximum value of all indices less than or equal to <code>b[j]</code>‘ is equivalent to <code>getMax(k)</code>.</li>
</ul>
<blockquote>
<p>In terms of effects, ‘Discretization’ should probably be called ‘Normalization’? 🤔</p>
</blockquote>
<p>The process of discretization is a typical template. Just memorize it:</p>
<blockquote>
<ol>
<li>Create a copy of the original array.</li>
<li>Sort the values in the copy in ascending order.</li>
<li>Remove duplicates from the sorted copy.</li>
<li>Find the position of each element in the original array in the sorted copy. This position becomes the ranking, and it is used as the discretized value.</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> ans[i] indicates the ranking of b[i] after sorting</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] discretize(<span class="type">int</span>[] b) &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = Arrays.stream(b).sorted().distinct().toArray();</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> b.length;</span><br><span class="line">    <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// b[i] must exist in arr</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">order</span> <span class="operator">=</span> Arrays.binarySearch(arr, b[i]);</span><br><span class="line">        <span class="comment">// ans[i] &gt;= 1 because index 0 of BIT must be left empty. In fact, you don&#x27;t need to add 1.</span></span><br><span class="line">        ans[i] = order + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If not removing duplicates, we use <code>std::lower_bound</code> instead of <code>std::binary_search</code> in C++. However, Java does not have such a function, so we must remove duplicates.</p>
<h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">BIT</span> &#123;</span><br><span class="line">        <span class="type">long</span>[] arr;</span><br><span class="line"></span><br><span class="line">        BIT(<span class="type">int</span> n) &#123;</span><br><span class="line">            arr = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">lsb</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> i &amp; -i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">setMax</span><span class="params">(<span class="type">int</span> i, <span class="type">long</span> val)</span> &#123;</span><br><span class="line">            <span class="comment">// Index i affects all subsequent intervals, so we add lsb</span></span><br><span class="line">            <span class="keyword">for</span> (; i &lt; arr.length; i += lsb(i)) &#123;</span><br><span class="line">                arr[i] = Math.max(arr[i], val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> Long.MIN_VALUE;</span><br><span class="line">            <span class="comment">// Prefix interval, so we subtract lsb</span></span><br><span class="line">            <span class="keyword">for</span> (; i &gt; <span class="number">0</span>; i -= lsb(i)) &#123;</span><br><span class="line">                ans = Math.max(ans, arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ans[i] indicates the ranking of b[i] after sorting</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] discretize(<span class="type">int</span>[] b) &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = Arrays.stream(b).sorted().distinct().toArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> b.length;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// b[i] must exist in arr</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">order</span> <span class="operator">=</span> Arrays.binarySearch(arr, b[i]);</span><br><span class="line">            <span class="comment">// ans[i] &gt;= 1 because index 0 of BIT must be left empty. In fact, you don&#x27;t need to add 1.</span></span><br><span class="line">            ans[i] = order + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maxBalancedSubsequenceSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="comment">// b[i] = nums[i] - i</span></span><br><span class="line">        <span class="type">int</span>[] b = IntStream.range(<span class="number">0</span>, n).map(i -&gt; nums[i] - i).toArray();</span><br><span class="line">        <span class="comment">// Discretization</span></span><br><span class="line">        <span class="type">int</span>[] arr = discretize(b);</span><br><span class="line">        <span class="type">BIT</span> <span class="variable">tree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BIT</span>(n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> Long.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="comment">// b[j] is the k-th smallest element</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> arr[j];</span><br><span class="line">            <span class="comment">// Range query for the maximum value</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">dp_i</span> <span class="operator">=</span> Math.max(tree.getMax(k), <span class="number">0</span>);</span><br><span class="line">            <span class="comment">// Point update</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">dp_j</span> <span class="operator">=</span> dp_i + nums[j];</span><br><span class="line">            tree.setMax(k, dp_j);</span><br><span class="line"></span><br><span class="line">            ans = Math.max(ans, dp_j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://leetcode.cn/problems/maximum-balanced-subsequence-sum/solutions/2513121/shu-zhuang-shu-zu-you-hua-dp-by-endlessc-3zf4/">Optimizing DP with BIT（Python&#x2F;Java&#x2F;C++&#x2F;Go）</a></li>
<li><a href="https://oi-wiki.org/misc/discrete/">Discretization - OI Wiki</a></li>
</ul>
]]></content>
      <categories>
        <category>Algorithm Problems</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>BIT</tag>
        <tag>Discretization</tag>
      </tags>
  </entry>
  <entry>
    <title>Deploying Nginx in Docker and Configuring SSL Certificate for Local Network</title>
    <url>/en/2024/01/31/Docker-Nginx-SSL-Local-Network/</url>
    <content><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>In my previous post, I successfully set up a LANraragi server and shared it with other devices in my home LAN. However, new issues arose:</p>
<ul>
<li>LANraragi could be accessed without logging in.</li>
<li>Even if LANraragi had a login feature, it still used HTTP plaintext transmission, which is equivalent to no password protection.</li>
</ul>
<p>The root cause of these issues was that devices like smartphones and smart home devices, connected to the LAN, were not trustworthy. They could potentially have backdoors (or ‘users voluntarily transmitting private data to improve service’). Anyway, these issues needed urgent resolution.</p>
<p>The solution is Nginx:</p>
<ul>
<li>Use Nginx’s built-in basic authentication to allow access only with a correct username and password.</li>
<li>Utilize Nginx’s reverse proxy feature. Once Nginx is configured with HTTPS, any software being proxied can use the encrypted transmission.</li>
</ul>
<p>Therefore, the key lies in the configuration of Nginx and SSL certificates. The challenge is that I need to request a certificate for an internal IP address without a corresponding domain name. This article explores these solutions, marking my first encounter with Nginx and SSL certificate configuration.</p>
<span id="more"></span>

<h1 id="Nginx-Container"><a href="#Nginx-Container" class="headerlink" title="Nginx Container"></a>Nginx Container</h1><h2 id="New-Nginx-Image"><a href="#New-Nginx-Image" class="headerlink" title="New Nginx Image"></a>New Nginx Image</h2><p>The official image only exposes port 80, while HTTPS requires port 443.</p>
<p>Create a <code>Dockerfile</code> on our own:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx:<span class="number">1.24</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">443</span></span><br></pre></td></tr></table></figure>

<p>Build the image:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -t elnino2024/nginx:1.24 .</span><br></pre></td></tr></table></figure>

<h2 id="Obtain-the-Default-Configuration-File"><a href="#Obtain-the-Default-Configuration-File" class="headerlink" title="Obtain the Default Configuration File"></a>Obtain the Default Configuration File</h2><p>Create a temporary container, copy the <code>nginx.conf</code> from it:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --name tmp-nginx-container -d elnino2024/nginx:1.24</span><br><span class="line">docker <span class="built_in">cp</span> tmp-nginx-container:/etc/nginx/nginx.conf /opt/nginx.conf</span><br><span class="line">docker <span class="built_in">rm</span> -f tmp-nginx-container</span><br></pre></td></tr></table></figure>

<h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elnino2024/nginx:1.24</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/nginx_ssl:/etc/nginx/ssl/:ro</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">50443</span><span class="string">:443</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Besides the configuration file, map a directory to store SSL private key and certificate.</li>
<li>Choose the bridge network mode; otherwise, other containers cannot be accessed.</li>
<li>Only map the <code>443</code> port, while I have no intention to open the <code>80</code> port.</li>
</ul>
<h1 id="SSL-Certificate"><a href="#SSL-Certificate" class="headerlink" title="SSL Certificate"></a>SSL Certificate</h1><h2 id="Create-a-CA"><a href="#Create-a-CA" class="headerlink" title="Create a CA"></a>Create a CA</h2><p>Create a CA key <code>myCAPK.key</code> and a (self-signed) certificate <code>myCACertificate.crt</code>:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openssl req -x509 -sha256 -nodes -days 3650 -newkey rsa:4096 -keyout myCAPK.key -out myCACertificate.crt</span><br></pre></td></tr></table></figure>

<p>The private key and certificate generated by this command can be directly used for Nginx server. However, if another server also needs an SSL certificate, client devices need to manually trust the new certificate, which is troublesome.</p>
<p>If this certificate is used as a CA certificate, as long as devices trust this certificate, all other certificates signed by this CA will be automatically trusted. Therefore, devices only need to manually add the CA certificate only once.</p>
<h2 id="Check-Certificate-Information"><a href="#Check-Certificate-Information" class="headerlink" title="Check Certificate Information"></a>Check Certificate Information</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openssl x509 -text -noout -<span class="keyword">in</span> myCACertificate.crt</span><br></pre></td></tr></table></figure>

<h2 id="Trust-the-CA"><a href="#Trust-the-CA" class="headerlink" title="Trust the CA"></a>Trust the CA</h2><p>As this CA certificate is self-created, the system won’t recognize it, so it needs to be installed.</p>
<p>Without this step, the browser can still establish an HTTPS connection but will prompt that the connection is not secure.</p>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>Control Panel | Internet Options | Content | Certificates</p>
<p><img src="/en/MarkDownImages/image-20240131172736021.png" alt="image-20240131172736021"></p>
<p>Trust the CA as a root certificate authority.</p>
<p><img src="/en/MarkDownImages/image-20240131172831043.png" alt="image-20240131172831043"></p>
<h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p>Different systems have different locations for installing certificates, but the basic options are the same. Here’s an example for Samsung:</p>
<p>Either choose ‘CA certificates’ or ‘VPN and app user certificates’. Do not choose ‘WLAN certificates’; it does not work.</p>
<p><img src="/en/MarkDownImages/Screenshot_20240201_113254_Settings.png" alt="Screenshot_20240201_113254_Settings"></p>
<h3 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h3><blockquote>
<p>Using iPadOS 15.7 as an example</p>
</blockquote>
<ol>
<li><p>Open your email, send the CA certificate as an attachment to yourself.</p>
</li>
<li><p>Using the Safari browser, log in to your email, click the attachment, and select “Download Profile” (a prompt will appear:  ‘go to settings to confirm installation’).</p>
</li>
<li><p>Go to settings, select “Install Profile,” enter your lock screen password.</p>
</li>
<li><p>Settings | General | About | Certificate Trust Settings: Enable full trust.</p>
<p> <img src="/en/MarkDownImages/IMG_2032.PNG" alt="IMG_2032"></p>
</li>
</ol>
<hr>
<p>According to Apple’s <a href="https://support.apple.com/en-us/102028">new policy</a>，server’s certificate cannot exceed 398 days, otherwise SSL connection errors occur（<code>NET::ERR_CERT_VALIDITY_TOO_LONG</code>.</p>
<h2 id="Create-Server-Key"><a href="#Create-Server-Key" class="headerlink" title="Create Server Key"></a>Create Server Key</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out nginx_server.key 4096</span><br></pre></td></tr></table></figure>

<h2 id="Create-Server-CSR-Certificate-Signing-Request"><a href="#Create-Server-CSR-Certificate-Signing-Request" class="headerlink" title="Create Server CSR (Certificate Signing Request)"></a>Create Server CSR (Certificate Signing Request)</h2><p>Create <code>openssl.cnf</code> with the following content:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">authorityKeyIdentifier</span>=<span class="string">keyid,issuer</span></span><br><span class="line"><span class="attr">basicConstraints</span>=<span class="string">CA:FALSE</span></span><br><span class="line"><span class="attr">subjectAltName</span> = <span class="string">@alt_names</span></span><br><span class="line"><span class="attr">[alt_names]</span></span><br><span class="line"><span class="comment"># 虚拟机</span></span><br><span class="line"><span class="attr">DNS.1</span> = <span class="string">CentOS100</span></span><br><span class="line"><span class="attr">IP.1</span> = <span class="string">192.168.169.132</span></span><br><span class="line"><span class="comment"># 主机</span></span><br><span class="line"><span class="attr">IP.2</span> = <span class="string">192.168.0.105</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>The configuration file can be more complex, but for this case, these few configurations are sufficient.</p>
</blockquote>
<ul>
<li><code>DNS.x</code> corresponds to hostname&#x2F;domain.</li>
<li><code>IP.x</code> corresponds to IP addresses.</li>
</ul>
<blockquote>
<p> <code>x</code> is a positive integer.</p>
</blockquote>
<p>The only purpose of this file is to bind the server’s domain name and IP with the certificate during CA signing, indicating that the certificate indeed belongs to that server and not someone else pretending. Without this configuration, the browser would show an error: <code>NET::ERR_CERT_COMMON_NAME_INVALID</code>.</p>
<p>Use the following command to create the CSR:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openssl req -new -key nginx_server.key -out nginx_server.csr</span><br></pre></td></tr></table></figure>

<h2 id="CA-Signing"><a href="#CA-Signing" class="headerlink" title="CA Signing"></a>CA Signing</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openssl x509 -req -extfile openssl.cnf  -<span class="keyword">in</span> nginx_server.csr -CA /opt/MyOwnCA/myCACertificate.crt -CAkey /opt/MyOwnCA/myCAPK.key -CAcreateserial -out nginx_server.crt -days 3650</span><br></pre></td></tr></table></figure>

<p>After signing, you will get the private key <code>nginx_server.key</code> and certificate <code>nginx_server.crt</code> ready to be used in Nginx.</p>
<h1 id="Nginx-Configuration"><a href="#Nginx-Configuration" class="headerlink" title="Nginx Configuration"></a>Nginx Configuration</h1><h2 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> default_server ssl http2;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl http2;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/nginx_server.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/nginx_server.key;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /... &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> ...;  </span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>This is just the basic configuration; there are more SSL directives in practice, but these are sufficient for now.</p>
</blockquote>
<h2 id="Basic-Authentication"><a href="#Basic-Authentication" class="headerlink" title="Basic Authentication"></a>Basic Authentication</h2><p>1️⃣First, create a username and password:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create the file if it doesn&#x27;t exist</span></span><br><span class="line"><span class="built_in">touch</span> /opt/docker/nginx_auth/.htpasswd-lanraragi</span><br><span class="line"><span class="comment"># Add user alpha to this configuration file</span></span><br><span class="line">htpasswd /opt/docker/nginx_auth/.htpasswd-lanraragi alpha</span><br></pre></td></tr></table></figure>

<p>Then, the system will prompt to set a password for the <code>alpha</code> user. To add multiple users, use the same command:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">htpasswd /opt/docker/nginx_auth/.htpasswd-lanraragi beta</span><br></pre></td></tr></table></figure>

<blockquote>
<p>On CentOS, the <code>htpasswd</code> command belongs to <code>httpd-tools</code>. If not installed, the system will prompt to install it.</p>
</blockquote>
<hr>
<p>2️⃣Configure in Nginx：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> /api &#123;</span><br><span class="line">    <span class="attribute">auth_basic</span>           <span class="string">&quot;Administrator’s Area&quot;</span>;</span><br><span class="line">    <span class="attribute">auth_basic_user_file</span> /etc/nginx/.htpasswd; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>auth_basic</code> prompts a message to user on the login page；</li>
<li><code>auth_basic_user_file</code> points to the previously created <code>.htpasswd</code>；</li>
</ul>
<p>It can also be enabled globally and disabled for specific URLs:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">auth_basic</span>           <span class="string">&quot;Administrator’s Area&quot;</span>;</span><br><span class="line">    <span class="attribute">auth_basic_user_file</span> conf/.htpasswd;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /public/ &#123;</span><br><span class="line">      <span class="attribute">auth_basic</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="Example-Lanraragi"><a href="#Example-Lanraragi" class="headerlink" title="Example: Lanraragi"></a>Example: Lanraragi</h1><p>Let’s come back to the initial demand: reverse proxy Lanraragi and provide a login feature.</p>
<p>Docker compose:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elnino2024/nginx:1.24</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx-lanraragi</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker/nginx_conf/nginx-lanraragi.conf:/etc/nginx/nginx.conf:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker/nginx_ssl:/etc/nginx/ssl/:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker/nginx_auth:/etc/nginx/auth/:ro</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">43000</span><span class="string">:443</span></span><br><span class="line">  <span class="attr">lanraragi:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">difegue/lanraragi:v.0.9.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">lanraragi</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mnt/hgfs/doujinshiArchives:/home/koyomi/lanraragi/content:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">lanraragi-database:/home/koyomi/lanraragi/database</span></span><br><span class="line">    <span class="attr">depends_on:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">nginx</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">lanraragi-database:</span></span><br></pre></td></tr></table></figure>

<p>Nginx configuration:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">user</span>  nginx;</span><br><span class="line"><span class="attribute">worker_processes</span>  auto;</span><br><span class="line"></span><br><span class="line"><span class="attribute">error_log</span>  /var/log/nginx/<span class="literal">error</span>.log <span class="literal">notice</span>;</span><br><span class="line"><span class="attribute">pid</span>        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; &quot;<span class="variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> default_server ssl http2;</span><br><span class="line">        <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl http2;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/nginx_server.crt;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/nginx_server.key;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">auth_basic</span>           <span class="string">&quot;Login to view any content&quot;</span>;</span><br><span class="line">        <span class="attribute">auth_basic_user_file</span> /etc/nginx/auth/.htpasswd-lanraragi;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="comment"># Access directly through service name in the same network</span></span><br><span class="line">            <span class="comment"># No need to map any port for lanraragi</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://lanraragi:3000;</span><br><span class="line">            <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">            <span class="attribute">http2_push_preload</span> <span class="literal">on</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Lanraragi’s own routing strategy cannot be changed, which means <code>/</code> must be mapped as-is to Lanraragi’s URI. In other words, Lanraragi needs a separate Nginx instance.</p>
<p>From a computational resources perspective, this isn’t a big deal, as one Nginx instance uses less than 20 MB of memory.</p>
<p>If each existing software gets its own Nginx, these Nginx instances can share a single SSL certificate. After all, when accessing the Linux host, it tells Nginx instances from each other by port, and the certificate is bound to IP&#x2F;domain. Although this is a solution, I’m not sure if it’s the best practice. However, in a home LAN scenario, it is clearly sufficient.</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li>ChatGPT</li>
<li><a href="https://mindsers.blog/en/post/https-using-nginx-certbot-docker/">HTTPS using Nginx and Let’s encrypt in Docker</a></li>
<li><a href="https://www.baeldung.com/openssl-self-signed-cert">Creating a Self-Signed Certificate With OpenSSL</a></li>
<li><a href="https://hub.docker.com/_/nginx">Nginx Docker hub</a></li>
<li><a href="https://www.tangyuecan.com/2021/12/17/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E6%90%AD%E5%BB%BA%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%AF%E4%BF%A1%E4%BB%BB%E7%9A%84ssl%E8%AF%81%E4%B9%A6/">局域网内搭建浏览器可信任的SSL证书</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-nginx-in-ubuntu-16-04">How To Create a Self-Signed SSL Certificate for Nginx in Ubuntu 16.04</a></li>
<li><a href="https://stackoverflow.com/questions/10175812/how-to-generate-a-self-signed-ssl-certificate-using-openssl">How to generate a self-signed SSL certificate using OpenSSL?</a></li>
<li><a href="https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-http-basic-authentication/">Restricting Access with HTTP Basic Authentication</a></li>
<li><a href="https://support.hcltechsw.com/csm?id=kb_article&sysparm_article=KB0098768">在iOS设备上安装根证书(CA)</a></li>
<li><a href="https://discussions.apple.com/thread/253667401?sortBy=best">Enabling self-signed certificates in iOS 15</a></li>
<li><a href="https://support.apple.com/en-us/102028">Apple: About upcoming limits on trusted certificates</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Nginx</tag>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo自定义404页面</title>
    <url>/en/2023/07/04/Hexo-custom-404/</url>
    <content><![CDATA[<h1 id="自定义-404-页面"><a href="#自定义-404-页面" class="headerlink" title="自定义 404 页面"></a>自定义 404 页面</h1><p>首先，创建一个名为 <code>404</code> 的 post</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo new <span class="number">404</span></span><br></pre></td></tr></table></figure>

<p>在对应的 md 文件中，我们可以自定义 404 页面。由于 Hexo 框架的特性，我们可以编写 JS 脚本，让页面动起来。</p>
<p>这里给出<a href="/404" target="_blank">我的 404 页面</a>。可以看到，上面有一个倒计时。当倒计时为 0 时，会自动跳转到首页。当然，用户也可以手动点击，从而返回首页。</p>
<p>下面是对应的代码，直接放在 md 文件中即可：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./../js/jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>您正在访问一个不存在的地址🤔<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>系统会在 <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;seconds&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 秒后自动跳转到首页,<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span> 您也可以点此 <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span> &gt;</span>链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span>, 手动跳转!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> seconds = $(<span class="string">&quot;#seconds&quot;</span>).<span class="title function_">text</span>();</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#seconds&quot;</span>).<span class="title function_">text</span>(--seconds);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (seconds == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                location.<span class="property">href</span> = <span class="string">&quot;/&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我选择将 jQuery 代码放在本地，这样页面响应更快。</p>
<p>jQuery 在这里只是用于获取 DOM 对象，因此也完全可以用原生 JS 函数来写。</p>
<h1 id="如何让网站跳转到自定义页面？"><a href="#如何让网站跳转到自定义页面？" class="headerlink" title="如何让网站跳转到自定义页面？"></a>如何让网站跳转到自定义页面？</h1><span id="more"></span>

<p>注意：以下方法仅限于 Github Pages，其他平台的方式可能不同。</p>
<p>在<code>front-matter</code>中添加如下内容，Github Pages 就能设置该页面为 404 页面</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">/404.html</span></span><br></pre></td></tr></table></figure>

<p>不妨随机访问一个不存在的网页？看看效果如何：▶ <a href="/hsfh/40u235u/jasdlafn" target="_blank">点我</a></p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-custom-404-page-for-your-github-pages-site">Creating a custom 404 page for your GitHub Pages site</a></p>
<p><a href="https://theme-next.js.org/docs/theme-settings/custom-pages.html#Custom-404-Page">theme-next: custom-pages</a></p>
]]></content>
      <categories>
        <category>softwares</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Azure Pipelines 架构解析</title>
    <url>/en/2023/10/06/Azure-Pipelines-Architecture/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Azure Pipelines 是 Azure DevOps（SaaS 平台）的一个组件，是一个自动化 CI&#x2F;CD 的“流水线”。类似的技术有<a href="https://github.com/features/actions">GitHub Actions</a> 和 <a href="https://www.jenkins.io/">Jenkins</a>。</p>
<p>作为使用者，我们只需要在 YAML 中定义各个任务，触发 Pipeline，Azure Pipelines 就能帮我们自动执行这些任务。</p>
<p>那么，任务是怎么被执行的呢？是否存在并行任务上限？我们怎样设计更高效地定义 YAML，从而让一次 Pipeline 更快地跑完呢？—— 本文将从任务调度的角度，解析 Azure Pipelines 的架构。在探讨的过程中，上述问题自然能得到解答。</p>
<span id="more"></span>

<h1 id="Azure-Pipelines-术语"><a href="#Azure-Pipelines-术语" class="headerlink" title="Azure Pipelines 术语"></a>Azure Pipelines 术语</h1><p><img src="/en/MarkDownImages/key-pipeline-concepts-overview-ca80c85c.png" alt="img"></p>
<p><strong>对于 Azure Pipelines 的使用者</strong>，一个 YAML 文件唯一定义了一条 Pipeline 的运行逻辑：</p>
<ul>
<li>一条 Pipeline 可以包含多个 Stage</li>
<li>一个 Stage 可以包含多个 Job</li>
<li>一个 Job 可以包含多个 Step</li>
<li>一个 Step 可以包含多个 task</li>
</ul>
<p><strong>对于 Azure Pipelines 本身</strong>，当一条 Pipeline 被触发，它需要调用计算资源，去执行 Pipeline 的逻辑。具体来说，会有一台机器（agent）负责执行一个 job。</p>
<p>一个 job 只会在一台 agent 上跑，它不会被进一步地拆分。而一条 Pipeline 的所有 job 可能会分配给不同的 agent 去执行。</p>
<p>这种分配是如何完成的呢？</p>
<h1 id="Azure-Pipelines-任务调度"><a href="#Azure-Pipelines-任务调度" class="headerlink" title="Azure Pipelines 任务调度"></a>Azure Pipelines 任务调度</h1><p>Azure Pipelines 的任务调度是一种典型的分布式任务调度模型（类似的技术有<a href="http://www.quartz-scheduler.org/">QUARTZ</a> 和 <a href="https://github.com/xuxueli/xxl-job">xxl-job</a>）：</p>
<ul>
<li>Azure Pipelines 上有一个<strong>『任务队列』</strong>，里面存放着所有待运行的 <u>job</u>（既指任务调度模型中的 Job&#x2F;Task，又指 Pipeline 中的 job 术语）</li>
<li>Agent 是 Worker，它会定时地查看<strong>『任务队列』</strong>中是否有 job 要运行。如果有，则某一台 Agent 会竞争获得执行该 Job 的权利，同时获得访问相应资源的权限。此时，它就可以开始执行这个 job 了。</li>
</ul>
<p>因此，一条 Pipeline 是这样执行的：</p>
<ol>
<li>触发 Pipeline。Azure Pipelines 解析 YAML，拆分为多个 Job，存入『任务队列』中。</li>
<li>假如此时有空闲的 Agent，说明『任务队列』此时为空。那么，它监听到了任务队列中加入新 job 后，开始与其他 Agent（假如有的话）竞争执行该 job。<ul>
<li>竞争成功，开始执行；</li>
<li>竞争失败，继续监听；</li>
</ul>
</li>
<li>假如此时没有空闲的 Agent，则说明『任务队列』之前已经有 job 了，或者没有 Agent 跑完自己之前领取的 job。那么这些新产生的 job 就会有序地等待 Agent 来执行。（job 按照 Pipeline 触发的时间来排队等待，因此是公平的）</li>
</ol>
<h1 id="Parallel-Jobs"><a href="#Parallel-Jobs" class="headerlink" title="Parallel Jobs"></a>Parallel Jobs</h1><p>任务调度框架意味着<strong>并行（parallel）</strong>。这也意味着，我们在定义 YAML 时，<strong>应该将没有依赖的 Steps 或 Tasks 提升为 Jobs，使得它们能够并行执行，缩短运行时间</strong>。</p>
<blockquote>
<p>在实习过程中，却鲜有人这样做，大家都用着默认的 Steps 级别，即使大部分 Agents 经常是空闲的。🤔</p>
</blockquote>
<p>那么，既然一个新 job 能否立刻执行取决于空闲 Agent 的存在，增加 Agent 的数量是否就能提高整体的吞吐量（单位时间内执行完成的 job 数量）呢？—— 很遗憾，并不是。</p>
<p>微软毕竟要靠 Azure 盈利的，他们又提出了 『Parallel Jobs』这个概念，表示能并行执行的 job 上限。这个量是需要购买的。</p>
<p>也就是说，如果想并行跑 job，我们不仅需要购买 Azure VM agents，还需要购买 Parallel Jobs。即使我们自己有很多台机器，也还是需要购买 Parallel Jobs。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><a href="https://learn.microsoft.com/en-us/training/modules/explore-azure-pipelines/3-describe-azure-pipelines">Describe Azure Pipelines</a></li>
<li><a href="https://learn.microsoft.com/en-us/training/modules/explore-azure-pipelines/4-understand-key-terms">Understand Azure Pipelines key terms</a></li>
<li><a href="https://learn.microsoft.com/en-us/training/modules/manage-azure-pipeline-agents-pools/7-communicate-with-azure-pipelines">Communicate with Azure Pipelines</a></li>
<li><a href="https://azure.microsoft.com/en-us/products/devops/pipelines#overview">Azure Pipelines 产品介绍</a></li>
<li><a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/agents/agents">Azure Pipelines agents</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>Azure</category>
      </categories>
      <tags>
        <tag>Azure</tag>
        <tag>Azure Pipelines</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>Install Jellyfin in Docker</title>
    <url>/en/2024/02/11/Jellyfin-Docker/</url>
    <content><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p><a href="https://jellyfin.org/">Jellyfin</a> is an open-source media server. Here is my way of using Jellyfin: download anime using qBittorrent, start Jellyfin, and then watch the anime on iPad through the client.</p>
<p>Previously, I have installed the portable version of Jellyfin on Windows because a Linux virtual machine can not utilize the graphics card for hardware transcoding. However, I discovered that the Android and iOS clients support most codecs, eliminating the need for server-side transcoding. Since I am already familiar with Jellyfin’s usage and configuration, I decided to migrate it to Docker.</p>
<p>Although Jellyfin itself is cross-platform, its configuration is still OS-dependent, especially when moving from Windows to Docker. Despite the availability of a <a href="https://github.com/MMMZZZZ/Jellyfin-Migrator">third-party script</a>, I chose to reconfigure it for safety, which does not require much effort.</p>
<p>This article mainly talks about how to install Jellyfin using Docker, along with any issues encountered and their solutions.</p>
<span id="more"></span>

<h1 id="Install-Jellyfin"><a href="#Install-Jellyfin" class="headerlink" title="Install Jellyfin"></a>Install Jellyfin</h1><p>Firstly, create two volumes:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume create jellyfin-config</span><br><span class="line">docker volume create jellyfin-cache</span><br></pre></td></tr></table></figure>

<p>Docker Compose:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">jellyfin:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">jellyfin/jellyfin:10.8.13-1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">jellyfin</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">58096</span><span class="string">:8096</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">58920</span><span class="string">:8920</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">jellyfin-config:/config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">jellyfin-cache:/cache</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mnt/hgfs/jellyfin-media:/media:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker/jellyfin_ssl/jellyfin.pfx:/ssl/jellyfin.pfx:ro</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">jellyfin-config:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">jellyfin-cache:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>Specify the image version; <code>10.8.13</code> is the latest stable version, and subsequent versions have the term <code>unstable</code>, so it’s best not to use <code>latest</code>.</p>
</li>
<li><p><code>8096</code> is the default HTTP port, and <code>8920</code> is the default HTTPS port.</p>
</li>
<li><p>Jellyfin uses the following paths to store data:</p>
<table>
<thead>
<tr>
<th>Directory</th>
<th>Description</th>
<th>Path</th>
</tr>
</thead>
<tbody><tr>
<td>Data Directory</td>
<td>Stores all Jellyfin data, usually referenced by other directories</td>
<td>Specified by ENV <code>JELLYFIN_DATA_DIR</code></td>
</tr>
<tr>
<td>Configuration Directory</td>
<td>Stores configuration files</td>
<td>Specified by ENV <code>JELLYFIN_CONFIG_DIR</code>; if not specified, it uses <code>&lt;Data Directory&gt;/config</code></td>
</tr>
<tr>
<td>Cache Directory</td>
<td>Stores server cache</td>
<td>Specified by ENV <code>JELLYFIN_CACHE_DIR</code>; if not specified, it uses <code>&lt;Data Directory&gt;/cache</code></td>
</tr>
<tr>
<td>Log Directory</td>
<td>Stores log files</td>
<td>Specified by ENV <code>JELLYFIN_LOG_DIR</code>; if not specified, it uses <code>&lt;Data Directory&gt;/log</code></td>
</tr>
</tbody></table>
<p>  These environment variables are specified in the <a href="https://hub.docker.com/layers/jellyfin/jellyfin/10.8.13-1/images/sha256-095e6d410d1d27b17cc4a961a9bab9fab5ffce6e49389d8ec685f65ab5538525?context=explore">Dockerfile</a>：</p>
  <figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=<span class="number">1</span> LC_ALL=en_US.UTF-<span class="number">8</span> LANG=en_US.UTF-<span class="number">8</span> LANGUAGE=en_US:en JELLYFIN_DATA_DIR=/config JELLYFIN_CACHE_DIR=/cache JELLYFIN_CONFIG_DIR=/config/config JELLYFIN_LOG_DIR=/config/log JELLYFIN_WEB_DIR=/jellyfin/jellyfin-web JELLYFIN_FFMPEG=/usr/lib/jellyfin-ffmpeg/ffmpeg</span><br></pre></td></tr></table></figure>

<p>  Therefore, <strong><code>/config</code> and <code>/cache</code> contain all data of the Jellyfin server</strong>, and these directories are mounted to <code>jellyfin-config</code> and <code>jellyfin-cache</code>, respectively.</p>
</li>
<li><p><code>/mnt/hgfs/jellyfin-media:/media:ro</code>: Mount media files from the local machine into Docker, the path can be arbitrary.</p>
</li>
<li><p><code>/opt/docker/jellyfin_ssl/jellyfin.pfx</code>: Used to configure the SSL certificate for the server, which will be discussed later.</p>
</li>
<li><p><code>TZ=Asia/Shanghai</code>: Set the time zone to make the log time consistent with the local machine.</p>
</li>
</ul>
<h1 id="Jellyfin-Configuration"><a href="#Jellyfin-Configuration" class="headerlink" title="Jellyfin Configuration"></a>Jellyfin Configuration</h1><p>Since it’s a fresh installation, all configurations need to be set up again. Here are some key points.</p>
<h2 id="Server-Users"><a href="#Server-Users" class="headerlink" title="Server | Users"></a>Server | Users</h2><p>Disable transcoding: Even if the client doesn’t support the codec, server-side software decoding is not allowed, as it can lead to high pressure on the system.</p>
<p>Remove the following two options for <strong>each user</strong>:</p>
<p><img src="/en/MarkDownImages/image-20240213140202762.png" alt="image-20240213140202762"></p>
<p>For the option ‘Allow video playback that requires conversion without re-encoding’, many articles recommend disabling it, but it seems to have no impact, so it can be left enabled.</p>
<h2 id="Advanced-Networking"><a href="#Advanced-Networking" class="headerlink" title="Advanced | Networking"></a>Advanced | Networking</h2><p>Select the mounted <code>jellyfin.pfx</code> file as the SSL certificate (how to generate this file is explained later):</p>
<p><img src="/en/MarkDownImages/image-20240213140616778.png" alt="image-20240213140616778"></p>
<p>Check ‘Enable HTTPS’ and restart the container.</p>
<p><img src="/en/MarkDownImages/image-20240213140600270.png" alt="image-20240213140600270"></p>
<p>There’s no need to enable ‘Force HTTPS’ because the firewall will only allow devices on the local network to access the HTTPS port; the local machine can still access Jellyfin via HTTP.</p>
<h1 id="SSL-Certificate"><a href="#SSL-Certificate" class="headerlink" title="SSL Certificate"></a>SSL Certificate</h1><p>Firstly, you need the private key <code>jellyfin-priv-key.key</code> and the certificate <code>jellyfin.crt</code> (refer to the <a href="/en/2024/01/31/Docker-Nginx-SSL-Local-Network/#SSL-Certificate">previous article</a>).</p>
<p>Then, use the following command to generate the <code>.pfx</code> file:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openssl pkcs12 -<span class="built_in">export</span> -out jellyfin.pfx -inkey jellyfin-priv-key.key -<span class="keyword">in</span> jellyfin.crt  -passout pass:</span><br></pre></td></tr></table></figure>

<h1 id="Local-Network-Settings"><a href="#Local-Network-Settings" class="headerlink" title="Local Network Settings"></a>Local Network Settings</h1><blockquote>
<p>Here is my network topology:</p>
<p>Windows host with a Linux virtual machine installed by VMware, and Docker runs on this virtual machine.</p>
<p>The host and other devices share the home network.</p>
</blockquote>
<p>Previously, when running Jellyfin on Windows, I allowed Jellyfin’s direct access to the home network. That is, the firewall rules were authorized for the Jellyfin executable rather than a specific port.</p>
<p>Now, with Docker, the following changes are made:</p>
<ol>
<li><p>Add a NAT mapping for the virtual machine, mapping Linux’s 58920 to the host’s 58920 port.</p>
<p> <img src="/en/MarkDownImages/image-20240213141926681.png" alt="image-20240213141926681"></p>
</li>
<li><p>Add a firewall inbound rule: <code>58920/tcp</code> for the private network.</p>
</li>
<li><p>Reconnect all client devices to the new server.</p>
</li>
</ol>
<hr>
<p>Jellyfin on Windows had port 58920 open, and after switching to the Docker version, it still uses the same port. We can access the web client through <code>https://hostIP:58920</code> in a browser. This ‘tricks’ Google Password Manager in some sense, allowing me to directly use the previous account and password.</p>
<h1 id="Some-Bugs"><a href="#Some-Bugs" class="headerlink" title="Some Bugs"></a>Some Bugs</h1><h2 id="Font-Issue"><a href="#Font-Issue" class="headerlink" title="Font Issue"></a>Font Issue</h2><p>After creating the container, enter the container and execute the following command:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt update &amp;&amp; apt install fonts-noto-cjk-extra</span><br></pre></td></tr></table></figure>

<p>Then restart the container.</p>
<p>Otherwise, Chinese characters on the media library cover images appear as squares.</p>
<h2 id="Symbolic-Links"><a href="#Symbolic-Links" class="headerlink" title="Symbolic Links"></a>Symbolic Links</h2><p>On Windows, we can create links using the <code>mklink</code> command. When running Jellyfin on Windows, to prevent Jellyfin from modifying the media directory, I used the <a href="https://github.com/el-nino2020/script-house/blob/main/script_house/FileSystemOperation.py#L125"><code>walk_while_link</code> function</a> to create symbolic links for each video file. However, shared folders in virtual machines can be set to read-only, and volumes can also be set to read-only, so there’s no need to do this in Docker.</p>
<p>Moreover, creating symbolic links this way causes videos to be unplayable, and Jellyfin reports errors when reading media data. I suspect this is due to symbolic links because many articles about NAS use hard links rather than symbolic links. However, I don’t prefer using hard links, especially on Windows.</p>
<p>Creating symbolic links for folders is still possible. For example, if the shared folder is <code>jellyfin-docker-media</code>, you can create symbolic links for the <code>films</code> and <code>animes</code> folders in other paths, putting them all under <code>jellyfin-docker-media</code>. This essentially adds an extra layer of abstraction and reduces the number of shared folders for the virtual machine.</p>
<p>In fact, this is what I did. The <code>/mnt/hgfs/jellyfin-media</code> in Docker-compose is the host’s <code>jellyfin-docker-media</code> shared folder.</p>
<h1 id="Docker-Knowledge"><a href="#Docker-Knowledge" class="headerlink" title="Docker Knowledge"></a>Docker Knowledge</h1><p>By installing Jellyfin, I deepened my understanding of Docker through practical experiences.</p>
<h2 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h2><p>I always thought that using the <code>EXPOSE</code> keyword in the Dockerfile was necessary for mapping ports when starting a container. However, that’s not the case.</p>
<blockquote>
<p>The <code>EXPOSE</code> instruction <strong>informs</strong> Docker that the container listens on the specified network ports at runtime. You can specify whether the port listens on TCP or UDP, and the default is TCP if you don’t specify a protocol.</p>
<p>The <code>EXPOSE</code> instruction <strong>doesn’t actually publish the port</strong>. It functions as a type of <strong>documentation</strong> between the person who builds the image and the person who runs the container, about which ports are intended to be published. To publish the port when running the container, use the <code>-p</code> flag on <code>docker run</code> to publish and map one or more ports, or the <code>-P</code> flag to publish all exposed ports and map them to high-order ports.</p>
</blockquote>
<p>These two paragraphs are excerpted from the official documentation. <code>EXPOSE</code> is merely a declarative instruction, and it’s the <code>-p</code> option that truly maps the container’s ports. This mapping can be done freely, without any restrictions.</p>
<p>Therefore, the approach I took in <a href="/en/2024/01/31/Docker-Nginx-SSL-Local-Network/#Nginx-Container">‘Deploying Nginx in Docker and Configuring SSL Certificate for Local Network’</a> is meaningless. There’s no need to create a new image just for <code>EXPOSE</code>.</p>
<blockquote>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx:<span class="number">1.24</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">443</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="Cache-Memory"><a href="#Cache-Memory" class="headerlink" title="Cache Memory"></a>Cache Memory</h2><p>In Portainer statistics, you can see that memory usage is divided into ‘Memory’ and ‘Cache’. What do these two terms mean? Which one represents the current memory usage?</p>
<p><img src="/en/MarkDownImages/image-20240213085846776.png" alt="image-20240213085846776"></p>
<p>In simple words, ‘Memory’ represents the current memory usage, while ‘Cache’ represents memory that <strong>was previously used</strong>. Memory Cache is a term in Docker, and its value is equal to the value of <code>Inactive(file)</code> in <code>/proc/meminfo</code>.</p>
<blockquote>
<p><code>Inactive(file)</code> — The amount of file cache memory, in kibibytes, that is newly loaded from the disk, or is a candidate for reclaiming.</p>
</blockquote>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://zhuanlan.zhihu.com/p/624670198">在Docker下安装Jellyfin并正确开启硬件解码</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/640489824">Docker部署开源流媒体软件Jellyfin</a></li>
<li><a href="https://jellyfin.org/docs/general/installation/container#using-docker-compose">Jellyfin doc installation</a></li>
<li><a href="https://jellyfin.org/docs/general/networking/#self-signed-certificate">Jellyfin doc self-signed certificate</a></li>
<li><a href="https://docs.docker.com/engine/reference/builder/#expose">Docker doc EXPOSE</a></li>
<li><a href="https://www.reddit.com/r/portainer/comments/w6pvit/what_is_memory_cache_in_the_container_stats/">What is memory “cache” in the container stat’s?</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>NAS</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>NAS</tag>
        <tag>Jellyfin</tag>
      </tags>
  </entry>
  <entry>
    <title>LANraragi Manga Server</title>
    <url>/en/2024/01/25/LANraragi-manga-server/</url>
    <content><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>Recently, I’ve been looking into home media libraries, and most tutorials focus on NAS, but most of the applications actually run on Docker.</p>
<p>Now, I have the following demands for reading manga&#x2F;doujinshi:</p>
<ul>
<li>I have a large collection of manga archives on my computer and want various devices able to access these resources. —— A server capable of transmitting images via HTTP.</li>
<li>I want to manage the manga directory according to my preferences, not the rules of the server software.</li>
<li>When browsing manga on my phone&#x2F;tablet, I want an easy-to-use interface. —— A user-friendly client or a Web UI.</li>
<li>The client should have a random manga selection feature. —— Due to the abundance of collected manga, randomly picking one for leisure is the most convenient.</li>
</ul>
<p>Considering these, I chose <a href="https://github.com/Difegue/LANraragi">LANraragi</a>. Although <a href="https://komga.org/">Komga</a>, <a href="https://www.kavitareader.com/#home">Kavita</a>, and <a href="https://github.com/Suwayomi/Tachidesk-Sorayomi">Tachidesk (Sorayomi)</a> are also open-source manga servers, they didn’t quite meet my expectations.</p>
<p>This article includes some excerpts from the official documentation and my own insights.</p>
<span id="more"></span>

<h1 id="LANraragi"><a href="#LANraragi" class="headerlink" title="LANraragi"></a>LANraragi</h1><p>LANraragi offers many features, but I only need a few of them:</p>
<table>
<thead>
<tr>
<th>Features</th>
<th>Required</th>
</tr>
</thead>
<tbody><tr>
<td>Upload local manga</td>
<td>✅</td>
</tr>
<tr>
<td>Download online manga</td>
<td>❌</td>
</tr>
<tr>
<td>Adding metadata (tagging)</td>
<td>❌</td>
</tr>
</tbody></table>
<p>All manga are uploaded locally by me. I just want to read manga and don’t need to categorize them with tags.</p>
<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>Docker compose:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">lanraragi:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">difegue/lanraragi:v.0.9.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">lanraragi</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">43000</span><span class="string">:3000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mnt/hgfs/doujinshiArchives:/home/koyomi/lanraragi/content:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">lanraragi-database:/home/koyomi/lanraragi/database</span></span><br><span class="line">        </span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">lanraragi-database:</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>/home/koyomi/lanraragi/database</code> is the directory where LANraragi stores Redis data. Just create a volume for it.</li>
<li>The <code>/home/koyomi/lanraragi/content</code> directory stores:<ul>
<li>All manga archives. LANraragi can recursively scan subdirectories —— file management is based on my preferences.</li>
<li>Thumbnails of manga, by default stored in <code>/home/koyomi/lanraragi/content/thumb</code>.</li>
</ul>
</li>
<li>Since the thumbnail directory can be configured, the <code>content</code> directory only contains my own archives. I set permissions to read-only and map the host directory where manga files are stored. LANraragi detects file changes on its own, and I can collect mangas just like before.</li>
</ul>
<hr>
<ul>
<li>Using Docker Compose allows for recording the startup command, making it convenient for reuse later.</li>
<li>Stack in Portainer is a synonym for Docker Compose. After modifying Docker-compose file, Portainer will redeploy it, which is convenient. (Essentially, it’s a combination of <a href="https://docs.docker.com/engine/reference/commandline/compose_down/">down</a> + up, but data won’t be lost because they are stored in volumes.)</li>
</ul>
<h1 id="Configurations"><a href="#Configurations" class="headerlink" title="Configurations"></a>Configurations</h1><p>On the first launch, the admin password is <code>kamimamita</code>. After logging in, go to the configuration page:</p>
<p><img src="/en/MarkDownImages/image-20240125195217045.png" alt="image-20240125195217045"></p>
<p>Firstly, a reminder: don’t forget to save your configuration changes:</p>
<p><img src="/en/MarkDownImages/image-20240125200813922.png" alt="image-20240125200813922"></p>
<p>Start by changing the initial password:</p>
<p><img src="/en/MarkDownImages/image-20240125195247264.png" alt="image-20240125195247264"></p>
<p>Other configurations are as follows:</p>
<h2 id="Global-Settings"><a href="#Global-Settings" class="headerlink" title="Global Settings"></a>Global Settings</h2><p><img src="/en/MarkDownImages/image-20240125195357388.png" alt="image-20240125195357388"></p>
<ul>
<li>Set <code>Archives per page</code> to 20; a default of 100 is too many.</li>
<li>The reading history feature is not needed, so I store them on the client side to save server resources.</li>
</ul>
<h2 id="Archive-Files"><a href="#Archive-Files" class="headerlink" title="Archive Files"></a>Archive Files</h2><p>No need to change.</p>
<p><img src="/en/MarkDownImages/image-20240125195541509.png" alt="image-20240125195541509"></p>
<h2 id="Tags-and-Thumbnails"><a href="#Tags-and-Thumbnails" class="headerlink" title="Tags and Thumbnails"></a>Tags and Thumbnails</h2><p><img src="/en/MarkDownImages/image-20240125195742625.png" alt="image-20240125195742625"></p>
<ul>
<li>The point here is to change the thumbnail directory, due to the read-only mapping during Docker startup and the default thumbnail directory in <code>content</code>.</li>
<li>Turn off the two options related to tags.</li>
</ul>
<h2 id="Background-Workers"><a href="#Background-Workers" class="headerlink" title="Background Workers"></a>Background Workers</h2><p><img src="/en/MarkDownImages/image-20240125200521462.png" alt="image-20240125200521462"></p>
<p>This is used to monitor changes in manga archives in the <code>content</code> directory. If new resources are not processed promptly, a manual restart may be needed.</p>
<h2 id="Plugin-Configuration"><a href="#Plugin-Configuration" class="headerlink" title="Plugin Configuration"></a>Plugin Configuration</h2><p><img src="/en/MarkDownImages/image-20240125200854396.png" alt="image-20240125200854396"></p>
<p>Turn this off as it’s not needed.</p>
<p>All plugins are disabled by default, So you may leave this setting as before.</p>
<h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><p>When mounting your own manga archives for the first time in the <code>content</code> directory, LANraragi requires significant resources to process metadata and thumbnails. According to Portainer’s monitoring data, it used 2-3GB of memory and 2000% CPU (not quite sure how this CPU resource is calculated).</p>
<p>Functions on the homepage:</p>
<ul>
<li>Search;</li>
<li>Display random mangas each time;</li>
<li>List mode &#x2F; thumbnail mode.</li>
</ul>
<p>Reader configuration:</p>
<p>1️⃣ Default is pagination mode.</p>
<p>2️⃣ I prefer infinite scrolling mode:</p>
<p><img src="/en/MarkDownImages/image-20240125201748231.png" alt="image-20240125201748231"></p>
<h1 id="Sharing-With-Other-Devices"><a href="#Sharing-With-Other-Devices" class="headerlink" title="Sharing With Other Devices"></a>Sharing With Other Devices</h1><p>My Docker runs in a Linux virtual machine, and due to Docker port mapping, LANraragi can be accessed on the host machine through the virtual machine’s IP.</p>
<h2 id="Virtual-Machine-NAT-Passthrough"><a href="#Virtual-Machine-NAT-Passthrough" class="headerlink" title="Virtual Machine NAT Passthrough"></a>Virtual Machine NAT Passthrough</h2><p>To access LANraragi from other devices, NAT passthrough is needed to map the virtual machine’s port to the host’s port:</p>
<p><img src="/en/MarkDownImages/image-20240125202125135.png" alt="image-20240125202125135"></p>
<p><img src="/en/MarkDownImages/image-20240125202155268.png" alt="image-20240125202155268"></p>
<p><img src="/en/MarkDownImages/image-20240125202344077.png" alt="image-20240125202344077"></p>
<p>As configured in the images, map port 43000 on the virtual machine to port 43000 on the host.</p>
<h2 id="Local-Firewall"><a href="#Local-Firewall" class="headerlink" title="Local Firewall"></a>Local Firewall</h2><p>Windows Firewall will block this port by default, so configure a new rule:</p>
<p><img src="/en/MarkDownImages/image-20240125202513739.png" alt="image-20240125202513739"></p>
<p><img src="/en/MarkDownImages/image-20240125202536458.png" alt="image-20240125202536458"></p>
<p><img src="/en/MarkDownImages/image-20240125202641453.png" alt="image-20240125202641453"></p>
<p>Create a new rule in inbound rules: open port 43000&#x2F;tcp for private networks (home networks).</p>
<p>Afterward, you can access LANraragi from your phone via <code>computerIP:43000</code>.</p>
<p>The homepage of the mobile web UI is not great, but you can use the <a href="https://sugoi.gitbook.io/lanraragi/advanced-usage/external-readers">officially recommended client</a>. However, since I only want to read randomly, it’s not a big issue. And the interface for reading manga is handy, So I will take it.</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://sugoi.gitbook.io/lanraragi/">LANraragi Official Documentation</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>NAS</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>NAS</tag>
        <tag>LANraragi</tag>
      </tags>
  </entry>
  <entry>
    <title>LocalSend：局域网文件传输利器</title>
    <url>/en/2023/09/04/LocalSend-A-powerful-tool-for-local-file-transfer/</url>
    <content><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>最近准备重装笔记本的系统，因此要备份文件，存到台式机里。我将要备份的文件夹压缩，通过 Windows 自带的文件夹共享（局域网共享），传输这些压缩包。</p>
<p>但是，传输过程却非常艰难。有的压缩包有 10 几个 GB，传了一分钟，网速就没了，之后就开始报超时之类的错误。更离谱的是，有个压缩包在两台电脑上<a href="#%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%A0%A1%E9%AA%8C">摘要算法</a>的结果不同。</p>
<p>显然，windows SMB 协议既不能保证速度，也不能保证数据正确性，于是我开始寻找更加好用的局域网传输软件。它，就是本文的主角 —— LocalSend</p>
<span id="more"></span>

<h1 id="LocalSend-介绍"><a href="#LocalSend-介绍" class="headerlink" title="LocalSend 介绍"></a>LocalSend 介绍</h1><p>LocalSend 是一个<strong>跨平台</strong>的局域网传输软件，支持 Windows, Linux, macOS, Android 和 IOS. 这是它的<a href="https://localsend.org/#/">官网</a>；这是它的 <a href="https://github.com/localsend/localsend">GitHub 仓库</a></p>
<p>作者设计了一个基于 HTTP 的传输协议，在<a href="https://github.com/localsend/protocol">这里</a></p>
<p>LocalSend 基本上是开箱即用，没必要专门写一节 quickstart</p>
<p>但是，由于 Windows 防火墙的默认配置，第一次使用该软件时，同局域网内的设备可能无法发现这台 Windows 设备。下面，我将给出解决方案。</p>
<h1 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h1><h2 id="我的方案"><a href="#我的方案" class="headerlink" title="我的方案"></a>我的方案</h2><ol>
<li><p>将家庭 WIFI 设置为专用网络（不建议在公共网络使用局域网传输文件，无论软件作者做了怎样的加密，我都认为是不安全的。因此，这里不讨论公用网络的情况）<img src="/en/MarkDownImages/image-20230904212558782.png" alt="image-20230904212558782"></p>
</li>
<li><p>进入『配置防火墙和安全设置』</p>
<p> <img src="/en/MarkDownImages/image-20230904212718315.png" alt="image-20230904212718315"></p>
</li>
<li><p>『允许应用通过防火墙』——『更改配置』。找到 <code>localsend_app</code>（其他以<code>localsend</code>开头的也可以这样做），将它之前那的单选框选上。以防万一，确保之后的两个单选框也是选上的（应该是默认开启的）。然后点击『确定』</p>
<p> <img src="/en/MarkDownImages/image-20230904212911221.png" alt="image-20230904212911221"></p>
</li>
<li><p>重启 LocalSend，等待找到目标主机</p>
</li>
</ol>
<h2 id="网上的方案（未验证）"><a href="#网上的方案（未验证）" class="headerlink" title="网上的方案（未验证）"></a>网上的方案（未验证）</h2><p>这里也给出网上其他人的解决方法，虽然我觉得全局操作防火墙<strong>很不安全</strong>。</p>
<ol>
<li><p>打开『Windows Defender 防火墙』</p>
<p> <img src="/en/MarkDownImages/image-20230904213446263.png" alt="image-20230904213446263"></p>
</li>
<li><p>『高级设置』——『Windows 防火墙属性』。在『专用配置文件』一栏，将『入站连接』改为『允许』，然后『应用』</p>
<p> <img src="/en/MarkDownImages/image-20230904213728952.png" alt="image-20230904213728952"></p>
</li>
<li><p>重启 LocalSend，查看能否找到目标主机。如果不行，再将上述『公用配置文件』一栏的『入站连接』改为『允许』，然后『应用』，再次重启 LocalSend 并检验。</p>
</li>
</ol>
<h1 id="文件传输校验"><a href="#文件传输校验" class="headerlink" title="文件传输校验"></a>文件传输校验</h1><p>在网络传输文件后，通常要使用摘要算法（MD5、SHA1、SHA256等）对比两份文件是否一致，防止由于网络导致的数据丢失。很多现成的工具提供这样的服务，这里我介绍 3 个。</p>
<h2 id="7-zip"><a href="#7-zip" class="headerlink" title="7-zip"></a>7-zip</h2><p>7-zip 虽然是一个开源的压缩软件，但也提供摘要函数。</p>
<p>右键选中要摘要的文件，点击『CRC SHA』，选择摘要算法</p>
<p><img src="/en/MarkDownImages/image-20230904214607556.png" alt="image-20230904214607556"></p>
<p>如果右键菜单没有该选项，在 7-zip 中配置即可：</p>
<p><img src="/en/MarkDownImages/image-20230904214947662.png" alt="image-20230904214947662"></p>
<h2 id="openssl"><a href="#openssl" class="headerlink" title="openssl"></a>openssl</h2><p>Linux 大多数发行版都会自带的工具。也可以在 git bash 中使用这个命令。语法是：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openssl 摘要算法名 文件路径</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Elnino@PC MINGW64 ~/Desktop</span><br><span class="line">$ openssl sha256 generate-random-file.cmd</span><br><span class="line">SHA256(generate-random-file.cmd)= 03f9454e4ee7923d08aefa4957282b62a655e7231ea6f4bdd6cdcc4e9a4c1bd9</span><br></pre></td></tr></table></figure>



<h2 id="Certutil"><a href="#Certutil" class="headerlink" title="Certutil"></a>Certutil</h2><p>Windows 上的一个用来提供证书服务的工具，也提供了一些摘要算法。语法是：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">certutil <span class="literal">-hashfile</span> 文件路径 摘要算法名</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\Elnino\Desktop&gt; certutil <span class="literal">-hashfile</span> .\generate<span class="literal">-random-file</span>.cmd sha256</span><br><span class="line">SHA256 的 .\generate<span class="literal">-random-file</span>.cmd 哈希:</span><br><span class="line"><span class="number">03</span>f9454e4ee7923d08aefa4957282b62a655e7231ea6f4bdd6cdcc4e9a4c1bd9</span><br><span class="line">CertUtil: <span class="literal">-hashfile</span> 命令成功完成。</span><br></pre></td></tr></table></figure>



<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在本文中，我介绍了一款开源好用的局域网传输工具 —— LocalSend。之后，我又给出了 Windows 系统中如何配置防火墙，使得其他设备能发现当前的设备。最后，我介绍了一些常见的对文件进行摘要的工具：从网络下载的文件，理论上都要进行一遍校验，防止数据损坏或丢失。</p>
]]></content>
      <categories>
        <category>softwares</category>
        <category>LocalSend</category>
      </categories>
      <tags>
        <tag>LocalSend</tag>
        <tag>settings</tag>
        <tag>Firewall</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-Plus 实现 MySQL JSON 类型字段的映射</title>
    <url>/en/2023/07/08/MyBatis-Plus-Mapping-MySQL-JSON-Type/</url>
    <content><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>MySQL 支持 JSON 类型的字段。相比字符串类型的字段， JSON 类型有如下好处：</p>
<ul>
<li>自动检查 JSON 语法是否正确</li>
<li>底层支持快速存取 JSON 中的元素。不需要将整个 字符串 全部读取出来，再解析成 JSON 对象</li>
</ul>
<p>在逻辑上，JSON 与 POJO 无异。Spring MVC 已经实现了 Controller 层两者的自动转化，这体现在请求参数和返回值上。那么，Repository 层如何实现两者的自动转换呢？</p>
<p>本文展示了通过使用 MyBatis-Plus，<strong>无侵入式</strong>地实现持久层 JSON 与 POJO 的自动映射（ORM， Object Relational Mapping）</p>
<h1 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h1><h2 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h2><span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `person` (</span><br><span class="line">  `id` bigint NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(255) NOT NULL,</span><br><span class="line">  `log` json NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB;</span><br></pre></td></tr></table></figure>

<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="entity"><a href="#entity" class="headerlink" title="entity"></a>entity</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;person&quot;, autoResultMap = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(typeHandler = JacksonTypeHandler.class)</span></span><br><span class="line">    <span class="keyword">private</span> PersonLog log;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">PersonLog</span> &#123;</span><br><span class="line">        List&lt;String&gt; hobbies;</span><br><span class="line">        Integer age;</span><br><span class="line">        String address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的<code>PersonLog</code>是重点讨论的对象，我们要实现它与 JSON 的映射。</p>
<p><code>Person</code>类上需要标记两个注解，两者通常一起使用：</p>
<p> <code>TableName#autoResultMap</code>：负责在<strong>查询</strong>时候把 JSON 转换为 POJO</p>
<p><code>TableField#typeHandler</code>：负责在<strong>插入</strong>时将 POJO 转换为 JSON。由于 spring-web-starter 已经导入了 jackson 依赖，直接使用 <code>JacksonTypeHandler</code> 即可。</p>
<h2 id="mapper-xml"><a href="#mapper-xml" class="headerlink" title="mapper.xml"></a>mapper.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.demo.mapper.PersonMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.example.demo.entity.Person&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;log&quot;</span> <span class="attr">property</span>=<span class="string">&quot;log&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;LONGVARCHAR&quot;</span> <span class="attr">typeHandler</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column_List&quot;</span>&gt;</span></span><br><span class="line">        id, name, log</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>mapper 文件中需要指出 <code>log</code> 字段的 typeHandler 的全类名</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PersonMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Person&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>省略了 Service 层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonMapper personMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/json&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">testJSON2BeanMap</span><span class="params">(<span class="meta">@RequestBody</span> Person person)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> personMapper.insert(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/json/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">getPersonById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> personMapper.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试两个方法，没报错就说明成功，插入时可以再查看一下数据库。</p>
<p>在<a href="#%E5%BA%8F%E8%A8%80">序言</a>中提到的<strong>无侵入式ORM</strong>，是指我们不需要在代码中手动地执行 JSON 与 PersonLog 的转换。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文展示了通过使用 MyBatis-Plus<strong>无侵入式</strong>实现持久层 JSON 与 POJO 的自动映射。</p>
<p>我对这一问题的研究源自实习时业务的要求。当我查询网上的资料时，发现帖子的表述都不太完整、直观，于是我记录下了解决方案，写成了这篇文章。</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://dev.mysql.com/doc/refman/8.0/en/json.html">The JSON Data Type</a></p>
<p><a href="https://blog.csdn.net/qq_33360626/article/details/119836835">mybatis-plus处理mysql中json格式方法</a></p>
]]></content>
      <categories>
        <category>tech</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
        <tag>MySQL</tag>
        <tag>MyBatis-Plus</tag>
        <tag>JDBC</tag>
        <tag>Repository</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 插入图片时自动拷贝——以 Typora 和  VS Code 为例</title>
    <url>/en/2023/07/22/Markdown-Automatically-Copy-When-Inserting-Images-Using-Typora-and-VS-Code-as-Examples/</url>
    <content><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>随着 Markdown 的普及，使用传统文本编辑器写作的效率显得低下，尤其表现在一些复杂语法，比如插入表格，或者插入图片。</p>
<p>Typora 作为业界知名的 Markdown 编辑器，除了著名的『即时渲染』，也拥有很多方便书写 Markdown 的功能，比如插入图片时的自动保存：往一个 Markdown 文件（文本文件）中粘贴一张图片，该图片便会自动保存到指定路径，并且自动在 Markdown 中建立好引用。</p>
<p>对于经常用 Markdown 记笔记的我来说，<strong>这一功能应该成为业界的标准</strong>。但是，另一款常用的编辑器 —— VS Code —— 对这一功能的支持并不好。当然，我们也不应该苛求这样一款免费、通用的编辑器能够面面俱到。</p>
<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>对于经常记笔记的用户，截图并插入 Markdown 是一个常见的需求。在这一操作的背后，有两个方面关乎着用户体验：1️⃣ 截图工具 2️⃣Markdown 编辑器。</p>
<p>在截图工具一致的情况下，Markdown 编辑器是决定用户体验的关键因素。下面我将展开介绍 3 种编辑器是如何插入图片的。</p>
<span id="more"></span>


<h1 id="传统文本编辑器"><a href="#传统文本编辑器" class="headerlink" title="传统文本编辑器"></a>传统文本编辑器</h1><p>这种编辑器通常只是支持 Markdown 语法高亮的“记事本”，比如 vim，sublime 等。</p>
<p>当我们截图完毕后，需要先将图片存储到本地，再使用 Markdown 语法手动引用该图片的路径：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">alt text</span>](<span class="link">image.jpg</span>)</span><br></pre></td></tr></table></figure>

<p>出于方便，截图软件往往会将图片都存储到特定路径下。为了单独存放每个 Markdown 文件相关的图片，我们还需要手动地剪切图片的位置。很麻烦！</p>
<h1 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h1><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>Typora 为插入图片提供了多种功能，我最常用的是『复制图片到指定路径』。</p>
<p>这里的『插入图片』，是指鼠标拖动图片到 Typora 中，或者从剪贴板（<code>win + v</code>）中粘贴</p>
<img src="/MarkDownImages/image-20230722141038783.png" alt="image-20230722141038783" style="zoom:50%;" />

<p>我选择保存到与当前 Markdown 文件同目录下的<code>MarkDownImages</code>文件夹下（没有会自动创建）。当然，更好的做法应该是选择『复制图片到 <code>./$&#123;filename&#125;.assets</code> 文件夹』，这样方便 Markdown 文件的迁移</p>
<img src="/MarkDownImages/image-20230722141359394.png" alt="image-20230722141359394" style="zoom:50%;" />

<p>『对网络位置的图片应用上述规则』：当我们复制了一个网络图片（的 url ） ，Typora 会自动下载图片到指定路径，并将 url 变为本地文件引用 —— 网络上的图片可能随时消失，本地存储更可靠。</p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>截图后，在 Typora 中按下 <code>Ctrl + v</code>，则剪贴板中的图片会自动拷贝到<code>MarkDownImages</code>文件夹下，并且<strong>文件名基于时间戳</strong>，不容易重复</p>
<hr>
<img src="/MarkDownImages/image-20230722142231405.png" alt="image-20230722142231405" style="zoom:67%;" />

<hr>
<img src="/MarkDownImages/image-20230722142307844.png" alt="image-20230722142307844" style="zoom:67%;" />

<hr>
<img src="/MarkDownImages/image-20230722142326387.png" alt="image-20230722142326387" style="zoom:67%;" />

<hr>
<p>可以看出，这种插入图片的方式非常优雅、便捷</p>
<h1 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h1><h2 id="设置-1"><a href="#设置-1" class="headerlink" title="设置"></a>设置</h2><p>VS Code 应该是在最近才加入类似 Typora 的功能，不过只提供了『复制图片到指定路径』的选项。</p>
<p>我这里的配置是插入任意文件（<code>**/*</code>）时，将它复制到与当前 Markdown 文件同目录下的 <code>MarkDownImages</code> 文件夹下（没有会自动创建）。文件名叫做 <code>VSCodeCopied-$&#123;fileName&#125;</code>。<code>$&#123;fileName&#125;</code>是原始文件名</p>
<p><img src="/en/MarkDownImages/image-20230722142953270.png" alt="image-20230722142953270"></p>
<p>或者可以直接复制以下内容到 <code>settings.json</code> 中：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;markdown.copyFiles.destination&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;**/*&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./MarkDownImages/VSCodeCopied-$&#123;fileName&#125;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h2><p>与 Typora 类似，截图按下 <code>Ctrl + v</code> 即可</p>
<p>为什么保存的图片名要叫做 <code>VSCodeCopied-$&#123;fileName&#125;</code>？因为将截图插入到 VS Code 中时，会被起名为<code>image.png</code></p>
<p><img src="/en/MarkDownImages/image-20230722143640371.png" alt="image-20230722143640371"></p>
<p>如果有重复，就在文件名后面添加数字以示区分：</p>
<p><img src="/en/MarkDownImages/image-20230722143756389.png" alt="image-20230722143756389"></p>
<p><img src="/en/MarkDownImages/image-20230722143813041.png" alt="image-20230722143813041"></p>
<p>这显然不直观，并且在团队合作写文档时容易造成文件名冲突。期待 VS Code 后续的更新中能够解决这一点，并提供更多的插入图片时的选项。</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://support.typora.io/Images/#when-insert-images">Images in Typora: when-insert-images</a></p>
<p><a href="https://www.markdownguide.org/cheat-sheet/">Markdown Cheat Sheet</a></p>
]]></content>
      <categories>
        <category>tech</category>
        <category>softwares</category>
        <category>VS Code</category>
        <category>Typora</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>settings</tag>
        <tag>VS Code</tag>
        <tag>Typora</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>PotPlayer 启用 Nvidia 超分辨率</title>
    <url>/en/2023/07/09/PotPlayer-Enable-Nvidia-Super-Resolution/</url>
    <content><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>Nvidia VSR (Video Super Resolution) 通过 AI 技术优化视频的画面质量，主要表现在锐化低分辨率的视频上。该技术最初只支持 Chrome 和 Edge 浏览器。</p>
<p>如何在本地视频播放器中体验这项技术？PotPlayer 最近发布了相关更新，支持了该技术。</p>
<p>PotPlayer 是目前数一数二的视频播放器，也是我的主力播放器。趁着这次更新，我来记录一下如何在 PotPlayer 上使用 Nvidia Super Resolution.</p>
<h1 id="浏览器开启-VSR"><a href="#浏览器开启-VSR" class="headerlink" title="浏览器开启 VSR"></a>浏览器开启 VSR</h1><p>本小节先介绍一下如何让 Chrome 和 Edge 浏览器使用 Nvidia Super Resolution。</p>
<span id="more"></span>

<h2 id="更新驱动版本"><a href="#更新驱动版本" class="headerlink" title="更新驱动版本"></a>更新驱动版本</h2><p>更新驱动版本，至少到 532 版</p>
<img src="/MarkDownImages/image-20230709161546792.png" alt="image-20230709161546792" style="zoom: 67%;" />

<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>在 Nvidia Control Panel 中进入如下配置：</p>
<p>开启『超分辨率』，选择质量。数字越大，增强效果越强，同时对 GPU 压力也越大</p>
<p><img src="/en/MarkDownImages/image-20230709161702760.png" alt="image-20230709161702760"></p>
<h1 id="PotPlayer-开启-VSR"><a href="#PotPlayer-开启-VSR" class="headerlink" title="PotPlayer 开启 VSR"></a>PotPlayer 开启 VSR</h1><h2 id="更新版本"><a href="#更新版本" class="headerlink" title="更新版本"></a>更新版本</h2><p>在 PotPlayer 近期的更新说明中，提到了：</p>
<blockquote>
<p>添加 GPU 超分辨率功能到内置的 D3D11 视频渲染器</p>
</blockquote>
<img src="/MarkDownImages/image-20230709162050531.png" alt="image-20230709162050531" style="zoom: 67%;" />

<p>至少将 PotPlayer 升级到这个版本</p>
<h2 id="设置-1"><a href="#设置-1" class="headerlink" title="设置"></a>设置</h2><p>确保使用的是『Direct3D 11 视频渲染器』，并打开『超分辨率』（默认是关闭的）</p>
<img src="/MarkDownImages/image-20230709162350077.png" alt="image-20230709162350077" style="zoom: 80%;" />

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>随便打开一个视频，按 <code>Tab</code> 键。如果『视频渲染器 - 缩放』显示的是『GPU Super Resolution』，则说明配置成功了。播放视频时，也可以在任务管理器中看到 GPU 的负载升高。</p>
<p><img src="/en/MarkDownImages/image-20230709162617479.png" alt="image-20230709162617479"></p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://blogs.nvidia.com/blog/2023/02/28/rtx-video-super-resolution/">Pixel Perfect: RTX Video Super Resolution Now Available for GeForce RTX 40 and 30 Series GPUs</a></p>
<p><a href="https://potplayer.daum.net/">PotPlayer 官网</a></p>
]]></content>
      <categories>
        <category>softwares</category>
        <category>PotPlayer</category>
      </categories>
      <tags>
        <tag>settings</tag>
        <tag>PotPlayer</tag>
        <tag>Nvidia</tag>
        <tag>VSR</tag>
      </tags>
  </entry>
  <entry>
    <title>Using Python venv</title>
    <url>/en/2023/12/20/Python-venv-use/</url>
    <content><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>Python is renowned for its rich set of modules. However, unlike in Java development where Maven uses group Id, artifact Id, and version to uniquely identify a dependency, in practice, most Python projects differentiate modules <strong>solely</strong> by their names. Run <code>pip install &lt;module&gt;</code>, and you’ve got the module. But what about the module version? Most project requirements do not specify versions, leading to constant errors for those who run the project later.</p>
<p>Hence, the concept of a weakened version number undoubtedly does more harm than good. How to solve this issue? By using venv (virtual environment).</p>
<p>If you directly use <code>pip install</code>, all Python projects share these modules, leading to potential compatibility issues. Venv copies the original Python environment. The virtual environment runs only on the copied Python, and the installed modules exist only in that virtual environment. Multiple virtual environments are isolated from each other.</p>
<h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><p>1️⃣Create venv:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">python <span class="literal">-m</span> venv C:\Users\Elnino\Desktop\test\venv</span><br></pre></td></tr></table></figure>

<p>The directory <code>C:\Users\Elnino\Desktop\test\venv</code> is the virtual environment.</p>
<span id="more"></span>

<p>2️⃣Activate:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">venv\Scripts\activate</span><br></pre></td></tr></table></figure>

<p>If <code>(venv)</code> appears in front of the prompt, it means activation is successful, and you can now freely work inside.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">(venv) C:\Users\Elnino\Desktop\test&gt;pip list</span><br></pre></td></tr></table></figure>

<p>3️⃣Deactivate: </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">(venv) C:\Users\Elnino\Desktop\test&gt;deactivate</span><br><span class="line">C:\Users\Elnino\Desktop\test&gt;</span><br></pre></td></tr></table></figure>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://docs.python.org/3/library/venv.html">venv — Creation of virtual environments</a></p>
]]></content>
      <categories>
        <category>tech</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>venv</tag>
      </tags>
  </entry>
  <entry>
    <title>VS Code Remote SSH Login By Key</title>
    <url>/en/2024/01/01/VS-Code-Remote-SSH-Login-By-Key/</url>
    <content><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>The Remote SSH extension in VS Code provides the functionality to connect to other remote hosts. While the basic way of connection requires a username and password, using a key allows for direct login without the effort to type the password every time.</p>
<p>However, it’s crucial to understand that VS Code merely provides a GUI, and how to use a SSH key to login is a separate matter. These two aspects should not be confused.</p>
<p>This article will primarily explain how to configure SSH keys on both the local machine and the remote machine. Subsequently, it will delve into the usage of the VS Code Remote SSH extension.</p>
<span id="more"></span>

<h1 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h1><ul>
<li>Local Machine: Windows 10</li>
<li>Remote Machine: Local virtual machine CentOS 8, root user</li>
</ul>
<h1 id="Local-SSH-Configuration"><a href="#Local-SSH-Configuration" class="headerlink" title="Local SSH Configuration"></a>Local SSH Configuration</h1><p>Using the <code>ssh-keygen</code> command will create the RSA public-private key pair for the <strong>local</strong> machine in the <code>C:\users\&lt;user&gt;\.ssh</code> directory:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\Elnino\.ssh&gt; <span class="built_in">dir</span></span><br><span class="line">    Directory: C:\Users\Elnino\.ssh</span><br><span class="line">Mode                 LastWriteTime         Length Name</span><br><span class="line"><span class="literal">----</span>                 <span class="literal">-------------</span>         <span class="literal">------</span> <span class="literal">----</span></span><br><span class="line"><span class="literal">-a----</span>          <span class="number">2024</span>/<span class="number">1</span>/<span class="number">1</span>     <span class="number">12</span>:<span class="number">26</span>             <span class="number">91</span> config</span><br><span class="line"><span class="literal">-a----</span>         <span class="number">2023</span>/<span class="number">9</span>/<span class="number">30</span>     <span class="number">18</span>:<span class="number">03</span>           <span class="number">2610</span> id_rsa</span><br><span class="line"><span class="literal">-a----</span>         <span class="number">2023</span>/<span class="number">9</span>/<span class="number">30</span>     <span class="number">18</span>:<span class="number">03</span>            <span class="number">576</span> id_rsa.pub</span><br><span class="line"><span class="literal">-a----</span>        <span class="number">2023</span>/<span class="number">12</span>/<span class="number">18</span>     <span class="number">20</span>:<span class="number">42</span>           <span class="number">1398</span> known_hosts</span><br><span class="line"><span class="literal">-a----</span>         <span class="number">2023</span>/<span class="number">9</span>/<span class="number">30</span>     <span class="number">18</span>:<span class="number">03</span>             <span class="number">92</span> known_hosts.old</span><br></pre></td></tr></table></figure>

<p><code>id_rsa</code> is the private key, and <code>id_rsa.pub</code> is the public key.</p>
<h1 id="Remote-Host-SSH-Configuration"><a href="#Remote-Host-SSH-Configuration" class="headerlink" title="Remote Host SSH Configuration"></a>Remote Host SSH Configuration</h1><p>Upload the <strong>local</strong> <code>id_rsa.pub</code> to the <code>~/ssh</code> directory on the Linux remote host and rename it to <code>authorized_keys</code>:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@CentOS100 .ssh]<span class="comment"># ll</span></span><br><span class="line">total 16</span><br><span class="line">-rw-r--r--. 1 root root 576 Jan  1 11:50 authorized_keys</span><br><span class="line">-rw-------. 1 root root 411 Jul  1  2023 id_ed25519</span><br><span class="line">-rw-r--r--. 1 root root  96 Jul  1  2023 id_ed25519.pub</span><br><span class="line">-rw-r--r--. 1 root root 880 Dec 18 21:07 known_hosts</span><br></pre></td></tr></table></figure>

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>The steps above complete the configuration needed for SSH key login. Open PowerShell on the local machine and test the connection using <code>ssh &lt;user&gt;@&lt;ip&gt;</code>. It should allow direct login without entering a password.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\Elnino&gt; ssh root@CentOS100</span><br><span class="line">Activate the web console with: systemctl enable <span class="literal">--now</span> cockpit.socket</span><br><span class="line"></span><br><span class="line">Last login: Mon Jan  <span class="number">1</span> <span class="number">12</span>:<span class="number">26</span>:<span class="number">15</span> <span class="number">2024</span> from &lt;ip&gt;</span><br><span class="line">[<span class="type">root</span>@<span class="type">CentOS100</span> ~]<span class="comment"># pwd</span></span><br><span class="line">/root</span><br></pre></td></tr></table></figure>

<h1 id="VS-Code-Configuration"><a href="#VS-Code-Configuration" class="headerlink" title="VS Code Configuration"></a>VS Code Configuration</h1><ol>
<li><p>Install the <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh">Remote - SSH</a> extension:</p>
<p> <img src="/en/MarkDownImages/image-20240101130622357.png" alt="image-20240101130622357"></p>
</li>
<li><p>Click these three buttons sequentially to access the configuration file:</p>
<p> <img src="/en/MarkDownImages/image-20240101130733756.png" alt="image-20240101130733756"></p>
</li>
<li><p>Fill in the configuration file (this file is essentially the SSH configuration for the host):</p>
<p> <img src="/en/MarkDownImages/image-20240101130804525.png" alt="image-20240101130804525"></p>
<ul>
<li><code>Host</code>: an ID for this remote connection; you can choose any name.</li>
<li><code>HostName</code>: Domain name or IP address of the remote host.</li>
<li><code>User</code>: User to login to the remote host.</li>
<li><code>IdentityFile</code>: Path to the <strong>private key</strong>, whose public key is in <code>authorized_keys</code>.</li>
</ul>
</li>
</ol>
<p>A few notes about the configuration file:</p>
<ul>
<li>If <code>authorized_keys</code> is not configured on the remote host, the <code>IdentityFile</code> property will not take effect, and it will prompt for a password during login.</li>
<li>In this case, <code>IdentityFile</code> is not necessary because <code>authorized_keys</code> is the local machine’s public key, and SSH defaults to using the local machine’s private key for connection attempts.</li>
<li>Generally, <code>authorized_keys</code> won’t be the local machine’s public key, and in such cases, <code>IdentityFile</code> must be configured; otherwise, a password will be required.</li>
</ul>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://medium.com/@sean4deepak/using-ssh-key-authentication-in-visual-studio-codes-remote-ssh-extension-4e5b922448e7">Using SSH Key Authentication in Visual Studio Code’ s Remote SSH Extension</a></li>
<li><a href="https://adamtheautomator.com/add-ssh-key-to-vs-code/">Add SSH Key to VS Code and Connect to a Host</a></li>
<li><a href="https://stackoverflow.com/questions/48328446/id-rsa-pub-file-ssh-error-invalid-format">id_rsa.pub file SSH Error: invalid format</a></li>
</ul>
]]></content>
      <categories>
        <category>softwares</category>
        <category>VS Code</category>
      </categories>
      <tags>
        <tag>settings</tag>
        <tag>VS Code</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC 使用 Validation 注解实现请求参数自动校验</title>
    <url>/en/2023/07/05/Spring-MVC-Automatic-Validation-of-Request-Parameters-Using-Validation-Annotations/</url>
    <content><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>控制器方法（ handler ）中负责请求参数校验。</p>
<p>传统的写法是在每个方法的开头对所有请求参数进行校验，如果存在参数不满足条件，则抛出异常，或者提前返回错误。</p>
<p>Validation API 提供了一系列的注解，通过将这些注解标记在 entity 类的属性上，Spring MVC 会根据这些注解的语义，自动完成请求参数校验。如果参数不满足条件，则抛出异常。这节省了开发者手动校验请求参数的麻烦。</p>
<p>负责自动参数校验的类实际上是由 Spring Boot 自动装配导入的，因此我们要使用对应的 starter 依赖。</p>
<h1 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><span id="more"></span>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>validation-api 是本次介绍的重点</p>
<img src="/MarkDownImages/image-20230705200537754.png" alt="image-20230705200537754" style="zoom:80%;" />

<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>一个标准的 Spring Initializer 生成的 Spring Boot 项目</p>
<img src="/MarkDownImages/image-20230705200916180.png" alt="image-20230705200916180" style="zoom: 80%;" />

<h2 id="entity"><a href="#entity" class="headerlink" title="entity"></a>entity</h2><h3 id="User"><a href="#User" class="headerlink" title="User"></a>User</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.elnino.springmvcvalidatordemo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="meta">@Size(max = 5, message = &quot;名字不能超过5个字符&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Min(value = 0, message = &quot;年龄不能小于0&quot;)</span></span><br><span class="line">    <span class="meta">@Max(value = 200, message = &quot;年龄不能大于200&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>@NotBlank</code>：用在 <code>CharSequence</code> 类型的属性上，表示该字段非空，且长度至少为 1。简单来说，该字符串必须有内容</p>
<p><code>@Size</code>：用在<code>CharSequence</code>和集合类的属性上，表示该字段的字符数&#x2F;元素数目。<code>max = 5</code>是数量的上界，不能超过该上界。当属性值不满足条件时，Spring MVC 会抛出异常，如果设置了<code>message</code>属性，则异常内容中会包含 <code>message</code> 的值</p>
<p><code>@NotNull</code>：字面含义，字段非空</p>
<p><code>@Min</code>、<code>@Max</code>：用在数值类型上，对数值的大小进行约束。</p>
<h3 id="Pet"><a href="#Pet" class="headerlink" title="Pet"></a>Pet</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.elnino.springmvcvalidatordemo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UserAndPet"><a href="#UserAndPet" class="headerlink" title="UserAndPet"></a>UserAndPet</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.elnino.springmvcvalidatordemo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAndPet</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Valid</span> <span class="comment">// 这个注解保证了User类内部的字段也能被校验</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@Valid</code>注解告诉 Spring MVC，它标记的类上也有字段需要校验。</p>
<h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.elnino.springmvcvalidatordemo.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elnino.springmvcvalidatordemo.entity.UserAndPet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> UserAndPet <span class="title function_">test</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> UserAndPet userAndPet)</span> &#123;</span><br><span class="line">        System.out.println(userAndPet);</span><br><span class="line">        <span class="keyword">return</span> userAndPet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@Validated</code>指示 Spring MVC：当前请求参数需要被校验</p>
<h2 id="使用-Postman-发送请求"><a href="#使用-Postman-发送请求" class="headerlink" title="使用 Postman 发送请求"></a>使用 Postman 发送请求</h2><h3 id="合法请求"><a href="#合法请求" class="headerlink" title="合法请求"></a>合法请求</h3><p>请求体如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;adam&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">15</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pet&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cat&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;east wind&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<img src="/MarkDownImages/image-20230705202651511.png" alt="image-20230705202651511" style="zoom:67%;" />

<h3 id="非法请求"><a href="#非法请求" class="headerlink" title="非法请求"></a>非法请求</h3><p>故意使<code>user.name</code>超过长度限制。请求体如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;adam williams&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">15</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pet&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cat&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;east wind&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>服务器返回了 400 错误</p>
<p><img src="/en/MarkDownImages/image-20230705202748075.png" alt="image-20230705202748075"></p>
<p>服务端抛出了<code>MethodArgumentNotValidException</code>的异常。内容是<code>user.name</code>为非法参数，同时展示了我们自己设置的 <code>message</code></p>
<p><img src="/en/MarkDownImages/image-20230705202916086.png" alt="image-20230705202916086"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过使用 Validation 注解，我们可以便捷地实现请求参数校验，无需写很多代码。</p>
<p>试想，我们使用传统方式校验请求参数，光是校验 <code>user.name</code>，就需要写很多代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> UserAndPet <span class="title function_">test</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> UserAndPet userAndPet)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (userAndPet == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (userAndPet.getUser() == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> userAndPet.getUser().getName();</span><br><span class="line">    <span class="keyword">if</span> (!(name != <span class="literal">null</span> &amp;&amp; name.length() &gt;= <span class="number">1</span> &amp;&amp; name.length() &lt;= <span class="number">5</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 校验其他请求参数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 业务逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然，方便快捷的 Validation 注解校验建立在 Spring MVC 和 Spring Boot 的基础上。Spring Boot 具体自动装配了哪些类，Spring MVC 又是如何使用这些类完成请求参数校验，就不在本文的讨论范围内了。有兴趣的读者可以自行阅读源码，或者阅读其他文章。</p>
]]></content>
      <categories>
        <category>tech</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
        <tag>Spring MVC</tag>
        <tag>Controller</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Weekly Contest 369 Summary</title>
    <url>/en/2023/10/29/leetcode-369-weekly-contest-summary/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><blockquote>
<p><a href="https://leetcode.cn/contest/weekly-contest-369/">LeetCode Weekly Contest 369</a></p>
</blockquote>
<blockquote>
<p>This article is a summary of the contest. I don’t plan to discuss each problem in detail, but will provide general ideas. The point of this article is self-reflection and improvement.</p>
</blockquote>
<p>After reviewing the contest, it is not so difficult. Here is a brief description of my performance on each problem:</p>
<ul>
<li>Problem 1: Simple simulation problem, an easy one.</li>
<li>Problem 2: Not difficult, but requires consideration of multiple cases. Unfortunately, I didn’t think thoroughly, resulting in 3 WA 😒.</li>
<li>Problem 3: a Medium-level DP problem. Initially struggled to come up with a solution, wasted time on the unsolved problem 4, but eventually solved it quickly 😋.</li>
<li>Problem 4: Despite being a hard-level problem and not solved during the contest, the code only exceeded time limits. After the contest, I figured out an optimization method by myself. Note that the messy logic during coding led to 2 WA 😒.</li>
</ul>
<span id="more"></span>

<h1 id="I-Find-the-K-or-of-an-Array"><a href="#I-Find-the-K-or-of-an-Array" class="headerlink" title="I. Find the K-or of an Array"></a>I. <a href="https://leetcode.cn/problems/find-the-k-or-of-an-array/">Find the K-or of an Array</a></h1><blockquote>
<p><strong>Problem Description:</strong></p>
<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>, and an integer <code>k</code>.</p>
<p>The <strong>K-or</strong> of <code>nums</code> is a non-negative integer that satisfies the following:</p>
<ul>
<li>The <code>ith</code> bit is set in the K-or <strong>if and only if</strong> there are at least <code>k</code> elements of <code>nums</code> in which bit <code>i</code> is set.</li>
</ul>
<p>Return <em>the <strong>K-or</strong> of</em> <code>nums</code>.</p>
<p><strong>Note</strong> that a bit <code>i</code> is set in <code>x</code> if <code>(2i AND x) == 2i</code>, where <code>AND</code> is the bitwise <code>AND</code> operator.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [7,12,9,8,9,15], k = 4</span><br><span class="line">Output: 9</span><br><span class="line">Explanation: Bit 0 is set at nums[0], nums[2], nums[4], and nums[5].</span><br><span class="line">Bit 1 is set at nums[0], and nums[5].</span><br><span class="line">Bit 2 is set at nums[0], nums[1], and nums[5].</span><br><span class="line">Bit 3 is set at nums[1], nums[2], nums[3], nums[4], and nums[5].</span><br><span class="line">Only bits 0 and 3 are set in at least k elements of the array, and bits i &gt;= 4 are not set in any of the array&#x27;s elements. Hence, the answer is 2^0 + 2^3 = 9.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,12,1,11,4,5], k = 6</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: Since k == 6 == nums.length, the 6-or of the array is equal to the bitwise AND of all its elements. Hence, the answer is 2 AND 12 AND 1 AND 11 AND 4 AND 5 = 0.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [10,8,5,9,11,6,8], k = 1</span><br><span class="line">Output: 15</span><br><span class="line">Explanation: Since k == 1, the 1-or of the array is equal to the bitwise OR of all its elements. Hence, the answer is 10 OR 8 OR 5 OR 9 OR 11 OR 6 OR 8 = 15.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 50</code></li>
<li><code>0 &lt;= nums[i] &lt; 231</code></li>
<li><code>1 &lt;= k &lt;= nums.length</code></li>
</ul>
</blockquote>
<p>The problem description is a bit hard to understand. Combining it with examples during the contest was necessary for quick understanding.</p>
<p>Bitwise simulation:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKOr</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((num &amp; val) &gt; <span class="number">0</span>) count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count &gt;= k)  &#123;</span><br><span class="line">                ans |= val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Time complexity: $O(n)$</p>
<h1 id="II-Minimum-Equal-Sum-of-Two-Arrays-After-Replacing-Zeros"><a href="#II-Minimum-Equal-Sum-of-Two-Arrays-After-Replacing-Zeros" class="headerlink" title="II. Minimum Equal Sum of Two Arrays After Replacing Zeros"></a>II. <a href="https://leetcode.cn/problems/minimum-equal-sum-of-two-arrays-after-replacing-zeros/">Minimum Equal Sum of Two Arrays After Replacing Zeros</a></h1><blockquote>
<p><strong>Problem Description:</strong></p>
<p>You are given two arrays <code>nums1</code> and <code>nums2</code> consisting of positive integers.</p>
<p>You have to replace <strong>all</strong> the <code>0</code>‘s in both arrays with <strong>strictly</strong> positive integers such that the sum of elements of both arrays becomes <strong>equal</strong>.</p>
<p>Return <em>the <strong>minimum</strong> equal sum you can obtain, or</em> <code>-1</code> <em>if it is impossible</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [3,2,0,1,0], nums2 = [6,5,0]</span><br><span class="line">Output: 12</span><br><span class="line">Explanation: We can replace 0&#x27;s in the following way:</span><br><span class="line">- Replace the two 0&#x27;s in nums1 with the values 2 and 4. The resulting array is nums1 = [3,2,2,1,4].</span><br><span class="line">- Replace the 0 in nums2 with the value 1. The resulting array is nums2 = [6,5,1].</span><br><span class="line">Both arrays have an equal sum of 12. It can be shown that it is the minimum sum we can obtain.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [2,0,2,0], nums2 = [1,4]</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: It is impossible to make the sum of both arrays equal.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums1.length, nums2.length &lt;= 105</code></li>
<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 106</code></li>
</ul>
</blockquote>
<ul>
<li>If there are <code>k</code> zeros in <code>nums1</code>, its sum must increase by at least <code>k</code> after replacement.</li>
<li>If <code>nums1</code> has at least one zero, its sum after replacement can be any value greater than <code>sum(nums1)</code>.</li>
<li>Similar for <code>nums2</code>.</li>
</ul>
<p>Return type of the function is <code>long</code>. Array length is at most $10^5$, elements are at most $10^6$, and the sum is at most $10^{11}$, exceeding the limit of a 32-bit integer, which reminds us that all the intermediate results should be stored in <code>long</code> type. In fact, it is a common practice to replace <code>int</code> with <code>long</code> in coding contests to avoid integer overflow.</p>
<p>The key is to identify conditions where equality does not hold. A mistake in this aspect led to three WA:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">minSum</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum1</span> <span class="operator">=</span> Arrays.stream(nums1).mapToLong(i -&gt; i).sum();</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum2</span> <span class="operator">=</span> Arrays.stream(nums2).mapToLong(i -&gt; i).sum();</span><br><span class="line">        <span class="type">long</span> <span class="variable">c1</span> <span class="operator">=</span> Arrays.stream(nums1).filter(i -&gt; i == <span class="number">0</span>).count();</span><br><span class="line">        <span class="type">long</span> <span class="variable">c2</span> <span class="operator">=</span> Arrays.stream(nums2).filter(i -&gt; i == <span class="number">0</span>).count();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sum1 &gt; sum2) &#123;</span><br><span class="line">            <span class="comment">// sum2 can not increase</span></span><br><span class="line">            <span class="keyword">if</span> (c2 == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// sum1 can not increase, sum2 has c2 zeros, so sum2 will increase by at least c2</span></span><br><span class="line">            <span class="keyword">if</span> (c1 == <span class="number">0</span> &amp;&amp; c2 + sum2 &gt; sum1) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum1 == sum2) &#123;</span><br><span class="line">            <span class="comment">// one of sum1 or sum2 must increase, while the other one will not change</span></span><br><span class="line">            <span class="keyword">if</span> (c1 == <span class="number">0</span> &amp;&amp; c2 != <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (c1 != <span class="number">0</span> &amp;&amp; c2 == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// same logic to the case where sum1 &gt; sum2</span></span><br><span class="line">            <span class="keyword">if</span> (c1 == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (c2 == <span class="number">0</span> &amp;&amp; c1 + sum1 &gt; sum2) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(sum1 + c1, sum2 + c2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="III-Minimum-Increment-Operations-to-Make-Array-Beautiful"><a href="#III-Minimum-Increment-Operations-to-Make-Array-Beautiful" class="headerlink" title="III. Minimum Increment Operations to Make Array Beautiful"></a>III. <a href="https://leetcode.cn/problems/minimum-increment-operations-to-make-array-beautiful/">Minimum Increment Operations to Make Array Beautiful</a></h1><blockquote>
<p><strong>Problem Description:</strong></p>
<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> having length <code>n</code>, and an integer <code>k</code>.</p>
<p>You can perform the following <strong>increment</strong> operation <strong>any</strong> number of times (<strong>including zero</strong>):</p>
<ul>
<li>Choose an index <code>i</code> in the range <code>[0, n - 1]</code>, and increase <code>nums[i]</code> by <code>1</code>.</li>
</ul>
<p>An array is considered <strong>beautiful</strong> if, for any <strong>subarray</strong> with a size of <code>3</code> or <strong>more</strong>, its <strong>maximum</strong> element is <strong>greater than or equal</strong> to <code>k</code>.</p>
<p>Return <em>an integer denoting the <strong>minimum</strong> number of increment operations needed to make</em> <code>nums</code> <em><strong>beautiful</strong>.</em></p>
<p>A subarray is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,3,0,0,2], k = 4</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: We can perform the following increment operations to make nums beautiful:</span><br><span class="line">Choose index i = 1 and increase nums[1] by 1 -&gt; [2,4,0,0,2].</span><br><span class="line">Choose index i = 4 and increase nums[4] by 1 -&gt; [2,4,0,0,3].</span><br><span class="line">Choose index i = 4 and increase nums[4] by 1 -&gt; [2,4,0,0,4].</span><br><span class="line">The subarrays with a size of 3 or more are: [2,4,0], [4,0,0], [0,0,4], [2,4,0,0], [4,0,0,4], [2,4,0,0,4].</span><br><span class="line">In all the subarrays, the maximum element is equal to k = 4, so nums is now beautiful.</span><br><span class="line">It can be shown that nums cannot be made beautiful with fewer than 3 increment operations.</span><br><span class="line">Hence, the answer is 3.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [0,1,3,3], k = 5</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: We can perform the following increment operations to make nums beautiful:</span><br><span class="line">Choose index i = 2 and increase nums[2] by 1 -&gt; [0,1,4,3].</span><br><span class="line">Choose index i = 2 and increase nums[2] by 1 -&gt; [0,1,5,3].</span><br><span class="line">The subarrays with a size of 3 or more are: [0,1,5], [1,5,3], [0,1,5,3].</span><br><span class="line">In all the subarrays, the maximum element is equal to k = 5, so nums is now beautiful.</span><br><span class="line">It can be shown that nums cannot be made beautiful with fewer than 2 increment operations.</span><br><span class="line">Hence, the answer is 2.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,1,2], k = 1</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: The only subarray with a size of 3 or more in this example is [1,1,2].</span><br><span class="line">The maximum element, 2, is already greater than k = 1, so we don&#x27;t need any increment operation.</span><br><span class="line">Hence, the answer is 0.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>3 &lt;= n == nums.length &lt;= 105</code></li>
<li><code>0 &lt;= nums[i] &lt;= 109</code></li>
<li><code>0 &lt;= k &lt;= 109</code></li>
</ul>
</blockquote>
<blockquote>
<p>An array is considered <strong>beautiful</strong> if, for any subarray with a size of <strong><code>3</code> or more</strong>, its <strong>maximum</strong> element is greater than or equal to <code>k</code>.</p>
</blockquote>
<p>This condition is equivalent to having <strong>every subarray of length 3</strong> with a maximum element $\ge k$.</p>
<p>Obviously, we should try to ensure that in every three consecutive elements, at least one element is $\ge k$. However, it is unclear which elements should be increased to $k$. To address this, let’s use DP.</p>
<p>1️⃣DP definition: <code>dp[i]</code>: the <strong>minimum</strong> increment operations to make <strong><code>nums[0:i]</code></strong> a beautiful array and <strong><code>nums[i]</code></strong> $\ge k$. — Here are three bold points.</p>
<p>If <code>nums[i]</code> $\ge k$, then <code>nums[i - 2 : i]</code> forms a subarray of length 3 that can be covered, satisfying the condition for being a beautiful array. This coverage simultaneously indicates that we need to ensure <code>nums[0:(i-3)]</code> is also a beautiful array to make <code>nums[0:i]</code> a beautiful array. Results from <code>dp[i - 3]</code>, <code>dp[i - 2]</code>, and <code>dp[i - 1]</code> all satisfy this requirement; thus, we take the minimum value in them:</p>
<p>2️⃣Recurrence relation: $dp[i] &#x3D; \max\set{0,k-nums[i]} + \min\set{dp[i - 1], dp[i - 2], dp[i - 3]}$</p>
<p>3️⃣Answer: Choose the minimum value among <code>dp[n - 3]</code>, <code>dp[n - 2]</code>, and <code>dp[n - 1]</code>, all of which can guarantee <code>nums</code> being a beautiful array by DP definition.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">minIncrementOperations</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">long</span>[] dp = <span class="keyword">new</span> <span class="title class_">long</span>[n];</span><br><span class="line">        <span class="comment">// base case</span></span><br><span class="line">        Arrays.fill(dp, Long.MAX_VALUE);</span><br><span class="line">        <span class="comment">// n &gt;= 3 guarantees that we do not need to check whether dp[0], dp[1] or dp[2] exists</span></span><br><span class="line">        dp[<span class="number">0</span>] = Math.max(<span class="number">0</span>, k - nums[<span class="number">0</span>]);</span><br><span class="line">        dp[<span class="number">1</span>] = Math.max(<span class="number">0</span>, k - nums[<span class="number">1</span>]);</span><br><span class="line">        dp[<span class="number">2</span>] = Math.max(<span class="number">0</span>, k - nums[<span class="number">2</span>]);</span><br><span class="line">        <span class="comment">// recursively</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">v</span> <span class="operator">=</span> Math.max(<span class="number">0</span>, k - nums[i]);</span><br><span class="line">            dp[i] = Math.min(dp[i], dp[i - <span class="number">1</span>] + v);</span><br><span class="line">            dp[i] = Math.min(dp[i], dp[i - <span class="number">2</span>] + v);</span><br><span class="line">            dp[i] = Math.min(dp[i], dp[i - <span class="number">3</span>] + v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// answer</span></span><br><span class="line">        <span class="keyword">return</span> Math.min(dp[n - <span class="number">1</span>], Math.min(dp[n - <span class="number">2</span>], dp[n - <span class="number">3</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="IV-Maximum-Points-After-Collecting-Coins-From-All-Nodes"><a href="#IV-Maximum-Points-After-Collecting-Coins-From-All-Nodes" class="headerlink" title="IV. Maximum Points After Collecting Coins From All Nodes"></a>IV. <a href="https://leetcode.cn/problems/maximum-points-after-collecting-coins-from-all-nodes/">Maximum Points After Collecting Coins From All Nodes</a></h1><blockquote>
<p><strong>Problem Description:</strong></p>
<p>There exists an undirected tree rooted at node <code>0</code> with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>. You are given a 2D <strong>integer</strong> array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [ai, bi]</code> indicates that there is an edge between nodes <code>ai</code> and <code>bi</code> in the tree. You are also given a <strong>0-indexed</strong> array <code>coins</code> of size <code>n</code> where <code>coins[i]</code> indicates the number of coins in the vertex <code>i</code>, and an integer <code>k</code>.</p>
<p>Starting from the root, you have to collect all the coins such that the coins at a node can only be collected if the coins of its ancestors have been already collected.</p>
<p>Coins at <code>nodei</code> can be collected in one of the following ways:</p>
<ul>
<li>Collect all the coins, but you will get <code>coins[i] - k</code> points. If <code>coins[i] - k</code> is negative then you will lose <code>abs(coins[i] - k)</code> points.</li>
<li>Collect all the coins, but you will get <code>floor(coins[i] / 2)</code> points. If this way is used, then for all the <code>nodej</code> present in the subtree of <code>nodei</code>, <code>coins[j]</code> will get reduced to <code>floor(coins[j] / 2)</code>.</li>
</ul>
<p>Return <em>the <strong>maximum points</strong> you can get after collecting the coins from <strong>all</strong> the tree nodes.</em></p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2023/09/18/ex1-copy.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: edges = [[0,1],[1,2],[2,3]], coins = [10,10,3,3], k = 5</span><br><span class="line">Output: 11                        </span><br><span class="line">Explanation: </span><br><span class="line">Collect all the coins from node 0 using the first way. Total points = 10 - 5 = 5.</span><br><span class="line">Collect all the coins from node 1 using the first way. Total points = 5 + (10 - 5) = 10.</span><br><span class="line">Collect all the coins from node 2 using the second way so coins left at node 3 will be floor(3 / 2) = 1. Total points = 10 + floor(3 / 2) = 11.</span><br><span class="line">Collect all the coins from node 3 using the second way. Total points = 11 + floor(1 / 2) = 11.</span><br><span class="line">It can be shown that the maximum points we can get after collecting coins from all the nodes is 11. </span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><strong><img src="https://assets.leetcode.com/uploads/2023/09/18/ex2.png" alt="img"></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: edges = [[0,1],[0,2]], coins = [8,4,4], k = 0</span><br><span class="line">Output: 16</span><br><span class="line">Explanation: </span><br><span class="line">Coins will be collected from all the nodes using the first way. Therefore, total points = (8 - 0) + (4 - 0) + (4 - 0) = 16.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == coins.length</code></li>
<li><code>2 &lt;= n &lt;= 105</code></li>
<li><code>0 &lt;= coins[i] &lt;= 104</code></li>
<li><code>edges.length == n - 1</code></li>
<li><code>0 &lt;= edges[i][0], edges[i][1] &lt; n</code></li>
<li><code>0 &lt;= k &lt;= 104</code></li>
</ul>
</blockquote>
<p>1️⃣Build the tree. It’s essentially building a graph, and we need to perform DFS starting from node 0 to simulate tree traversal.</p>
<p>2️⃣There are two ways to collect coins (the problem is intentionally written in complicated words, requiring simplification):</p>
<ul>
<li>Option 1: Currently-collected coins plus <code>coins[i] - k</code> (regardless of sign).</li>
<li>Option 2: <code>floor(coins[i] / 2)</code> is essentially integer division, we should optimize the division using bitwise operation i.e., <code>coins[i] &gt;&gt; 1</code>. Bitwise operation also has the advantage that if the current node has $k$ ancestors choosing Option 2, then the coin count for that node is <code>coins[i] &gt;&gt; k</code>, avoiding the time cost of computing $2^k$ and division by $2^k$.</li>
</ul>
<p>Based on these two options, we can write a recursive function for pre-order traversal:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Pre-order traversal, collecting coins</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> root Root node of the subtree</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> half Number of times ancestors of the subtree chose Option 2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Maximum coins that can be collected in the subtree</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> <span class="title function_">recur</span><span class="params">(Node root, <span class="type">long</span> half)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// Node is a graph node, visited is used for traversal</span></span><br><span class="line">    <span class="comment">// Pre-order traversal is essentially DFS</span></span><br><span class="line">    visited[root.index] = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// Option 1</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">res1</span> <span class="operator">=</span> (root.val &gt;&gt; half) - k;</span><br><span class="line">    <span class="keyword">for</span> (Node child : root.children) &#123;</span><br><span class="line">        <span class="keyword">if</span> (visited[child.index]) <span class="keyword">continue</span>;</span><br><span class="line">        res1 += recur(child, half);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Option 2</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">res2</span> <span class="operator">=</span> (root.val &gt;&gt; (<span class="number">1</span> + half));</span><br><span class="line">    <span class="keyword">for</span> (Node child : root.children) &#123;</span><br><span class="line">        <span class="keyword">if</span> (visited[child.index]) <span class="keyword">continue</span>;</span><br><span class="line">        res2 += recur(child, half + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    visited[root.index] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> Math.max(res1, res2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Up to this point, I had written the code during the contest but still encountered a timeout. Later, I came up with the following optimization ideas:</p>
<p>3️⃣ $\forall i, coins[i] \le 10^4$, and $\log_2(10^4) \approx 13.8$. Thus, as long as the ancestors of the current subtree have chosen Option 2 at least 14 times, the coin count for all nodes in this subtree will continuously halve to 0.</p>
<p>This is basically a pruning technique, and we check it at the beginning of the <code>recur</code> function:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (half &gt;= <span class="number">14</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>4️⃣Speaking of recursion, we think about divide and conquer paradigms, which then lead to thoughts about DP paradigms. What is the difference between the two? — DP reuses results of subproblems, making it more efficient.</p>
<p>Although the process of traversing the tree cannot be written as an iteration, we can use a map to cache results of subproblems: the key is <code>(nodes[i], half)</code>, and the value is the number of collected coins.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;Node, HashMap&lt;Long, Long&gt;&gt; dpMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> <span class="title function_">recur</span><span class="params">(Node root, <span class="type">long</span> half)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// Check cache, return directly if found</span></span><br><span class="line">    HashMap&lt;Long, Long&gt; mp = dpMap.get(root);</span><br><span class="line">    <span class="keyword">if</span> (mp != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">ans</span> <span class="operator">=</span> mp.get(half);</span><br><span class="line">        <span class="keyword">if</span> (ans != <span class="literal">null</span>) <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Option 1 and Option 2 code...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Insert into cache</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> Math.max(res1, res2);</span><br><span class="line">    dpMap.putIfAbsent(root, <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;());</span><br><span class="line">    dpMap.get(root).put(half, ans);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>With these two optimization steps, the code successfully passed:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        List&lt;Node&gt; children = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> val, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">            <span class="built_in">this</span>.index = index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span>[] visited;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumPoints</span><span class="params">(<span class="type">int</span>[][] edges, <span class="type">int</span>[] coins, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.k = k;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> coins.length;</span><br><span class="line">        visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        Node[] nodes = IntStream.range(<span class="number">0</span>, n).mapToObj(i -&gt; <span class="keyword">new</span> <span class="title class_">Node</span>(coins[i], i)).toArray(Node[]::<span class="keyword">new</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] e : edges) &#123;</span><br><span class="line">            nodes[e[<span class="number">0</span>]].children.add(nodes[e[<span class="number">1</span>]]);</span><br><span class="line">            nodes[e[<span class="number">1</span>]].children.add(nodes[e[<span class="number">0</span>]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) recur(nodes[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Recursive result cache, elevates divide and conquer algorithm to DP algorithm for efficiency</span></span><br><span class="line"><span class="comment">     * &lt;node, &lt;half, result&gt;&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;Node, HashMap&lt;Long, Long&gt;&gt; dpMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Pre-order traversal, collecting coins</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root Root node of the subtree</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> half Number of times ancestors of the subtree chose Option 2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Maximum coins that can be collected in the subtree</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">recur</span><span class="params">(Node root, <span class="type">long</span> half)</span> &#123;</span><br><span class="line">        <span class="comment">// coins[i] &lt;= 10^4 -&gt; log_2 (10^4) &lt; 14</span></span><br><span class="line">        <span class="keyword">if</span> (half &gt;= <span class="number">14</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// Check cache, return directly if found</span></span><br><span class="line">        HashMap&lt;Long, Long&gt; mp = dpMap.get(root);</span><br><span class="line">        <span class="keyword">if</span> (mp != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">ans</span> <span class="operator">=</span> mp.get(half);</span><br><span class="line">            <span class="keyword">if</span> (ans != <span class="literal">null</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Node is a graph node, visited is used for traversal</span></span><br><span class="line">        <span class="comment">// Pre-order traversal is essentially DFS</span></span><br><span class="line">        visited[root.index] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// Option 1</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">res1</span> <span class="operator">=</span> (root.val &gt;&gt; half) - k;</span><br><span class="line">        <span class="keyword">for</span> (Node child : root.children) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[child.index]) <span class="keyword">continue</span>;</span><br><span class="line">            res1 += recur(child, half);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Option 2</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">res2</span> <span class="operator">=</span> (root.val &gt;&gt; (<span class="number">1</span> + half));</span><br><span class="line">        <span class="keyword">for</span> (Node child : root.children) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[child.index]) <span class="keyword">continue</span>;</span><br><span class="line">            res2 += recur(child, half + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        visited[root.index] = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// Insert into cache</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> Math.max(res1, res2);</span><br><span class="line">        dpMap.putIfAbsent(root, <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;());</span><br><span class="line">        dpMap.get(root).put(half, ans);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Algorithm Problems</category>
        <category>Algorithm Contest</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>Simulation</tag>
        <tag>Bit Manipulation</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Common Commands for pip &amp; conda</title>
    <url>/en/2024/01/14/pip-conda-Common-Commands/</url>
    <content><![CDATA[<h1 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h1><ol>
<li><p>Install <code>script-house</code>, version <code>0.0.2</code>.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install script-house==0.0.2</span><br></pre></td></tr></table></figure>

<p> If you want to install the latest version by default, you can omit <code>==0.0.2</code>.</p>
<p> To install multiple dependencies in one line:</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install script-house==0.0.2 pydantic==2.5.3 pymongo==4.6.1</span><br></pre></td></tr></table></figure></li>
</ol>
<span id="more"></span>

<ol start="2">
<li><p>List all dependencies.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure>
</li>
<li><p>List current dependencies in <code>requirements.txt</code> format.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip freeze</span><br></pre></td></tr></table></figure>

<p> The result of <code>pip freeze</code> is a subset of <code>pip list</code>. <code>pip list</code> usually includes fundamental dependencies like <code>pip</code>, <code>setuptools</code>, and <code>wheel</code>.</p>
<p> The purpose of <code>pip freeze</code> is to export project dependencies for others to use, while <code>pip list</code> is just for display.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>Install all dependencies from <code>requirements.txt</code>.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>Uninstall a specific dependency.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip uninstall script-house</span><br></pre></td></tr></table></figure>
</li>
<li><p>Uninstall multiple dependencies.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip uninstall -r req.txt -y</span><br></pre></td></tr></table></figure>

<p> <code>-y</code> automatically confirms the deletion.</p>
<p> How to uninstall all dependencies in the current environment?</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; req</span><br><span class="line">pip uninstall <span class="literal">-r</span> req <span class="literal">-y</span></span><br><span class="line"><span class="built_in">del</span> req</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="conda"><a href="#conda" class="headerlink" title="conda"></a>conda</h1><ol>
<li><p>After conda is installed on Linux, you should run <code>conda init</code> first before using conda commands; On Windows, there is no such need.</p>
</li>
<li><p>List all environments.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">conda <span class="built_in">env</span> list</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create a new environment.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">conda create -n &lt;environment-name&gt; python=3.8</span><br></pre></td></tr></table></figure>

<p> The basic command is <code>conda create -n &lt;environment-name&gt;</code>, but specifying the Python version is a common practice. Compared to venv, conda environments also install some basic OS-dependent dependencies.</p>
</li>
<li><p>Activate an environment.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">conda activate &lt;environment-name&gt;</span><br></pre></td></tr></table></figure>

<p> On Windows, you probably need to omit <code>conda</code>.</p>
</li>
<li><p>Deactivate the environment.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure>
</li>
<li><p>Remove an environment.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">conda remove -n &lt;environment-name&gt; --all</span><br></pre></td></tr></table></figure>
</li>
<li><p>View basic information.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">conda info</span><br></pre></td></tr></table></figure>
</li>
<li><p>Install dependencies.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">conda install pytorch==1.12.1 torchvision==0.13.1 torchaudio==0.12.1 -c pytorch -c conda-forge</span><br></pre></td></tr></table></figure>

<p> Similar to pip, it follows the format <code>dependency==version</code>; the <code>-c</code> parameter specifies the download source (channel) as default channels often fail.</p>
</li>
<li><p>Create an environment from a configuration file (usually named <code>environment.yml</code>).</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">conda <span class="built_in">env</span> create -f environment.yml</span><br></pre></td></tr></table></figure>

<p> Content of <code>environment.yml</code>:</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">&lt;environment-name&gt;</span></span><br><span class="line"><span class="attr">channels:</span> <span class="comment"># -c parameter, specifying download source</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pytorch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">conda-forge</span></span><br><span class="line"><span class="attr">dependencies:</span> <span class="comment"># dependencies installed by conda</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">python=3.8</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">numpy</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">pandas</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">matplotlib</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">pip:</span> <span class="comment"># dependencies installed by pip</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">imageio</span></span><br></pre></td></tr></table></figure>

<p> It’s not recommended to create a new environment by this method, because channels often fail.</p>
</li>
<li><p>Disable auto-activation of the base environment. If enabled, every new shell will automatically activate the base environment.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">conda config --<span class="built_in">set</span> auto_activate_base <span class="literal">false</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>tech</category>
        <category>Python</category>
        <category>cheat sheet</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>pip</tag>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Weekly Contest 370 Summary</title>
    <url>/en/2023/11/05/leetcode-370-weekly-contest-summary/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><blockquote>
<p><a href="https://leetcode.cn/contest/weekly-contest-370/">LeetCode Weekly Contest 370</a></p>
</blockquote>
<blockquote>
<p>This article is a summary of the weekly contest. I do not plan to discuss each problem in detail; for some problems, I will only provide a rough outline. The point of this article is self-reflection and improvement.</p>
</blockquote>
<p>Achieved AC in the first three problems within 23 minutes, resulting in a ranking around 300 - more like a typing contest emphasizing speed rather than a coding contest. Brief description of problem-solving:</p>
<ul>
<li>Problem 1: Easy problem but got stuck for 5 minutes 😒;</li>
<li>Problem 2: Similar to the first one in terms of background, also easy problem, but solved faster 😋;</li>
<li>Problem 3: A real medium-level problem that required a bit more thought, solved in 15 minutes, not bad 😋;</li>
<li>Problem 4: Couldn’t solve. If the data range is small, it’s a simple DP problem, but couldn’t find an optimization 😒;</li>
</ul>
<span id="more"></span>



<h1 id="I-Find-Champion-I"><a href="#I-Find-Champion-I" class="headerlink" title="I. Find Champion I"></a>I. <a href="https://leetcode.cn/problems/find-champion-i/">Find Champion I</a></h1><blockquote>
<p><strong>Problem Description:</strong></p>
<p>There are <code>n</code> teams numbered from <code>0</code> to <code>n - 1</code> in a tournament.</p>
<p>Given a <strong>0-indexed</strong> 2D boolean matrix <code>grid</code> of size <code>n * n</code>. For all <code>i, j</code> that <code>0 &lt;= i, j &lt;= n - 1</code> and <code>i != j</code> team <code>i</code> is <strong>stronger</strong> than team <code>j</code> if <code>grid[i][j] == 1</code>, otherwise, team <code>j</code> is <strong>stronger</strong> than team <code>i</code>.</p>
<p>Team <code>a</code> will be the <strong>champion</strong> of the tournament if there is no team <code>b</code> that is stronger than team <code>a</code>.</p>
<p>Return <em>the team that will be the champion of the tournament.</em></p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: grid = [[0,1],[0,0]]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: There are two teams in this tournament.</span><br><span class="line">grid[0][1] == 1 means that team 0 is stronger than team 1. So team 0 will be the champion.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: grid = [[0,0,1],[1,0,1],[0,0,0]]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: There are three teams in this tournament.</span><br><span class="line">grid[1][0] == 1 means that team 1 is stronger than team 0.</span><br><span class="line">grid[1][2] == 1 means that team 1 is stronger than team 2.</span><br><span class="line">So team 1 will be the champion.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == grid.length</code></li>
<li><code>n == grid[i].length</code></li>
<li><code>2 &lt;= n &lt;= 100</code></li>
<li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li>
<li>For all <code>i grid[i][i]</code> is <code>0.</code></li>
<li>For all <code>i, j</code> that <code>i != j</code>, <code>grid[i][j] != grid[j][i]</code>.</li>
<li>The input is generated such that if team <code>a</code> is stronger than team <code>b</code> and team <code>b</code> is stronger than team <code>c</code>, then team <code>a</code> is stronger than team <code>c</code>.</li>
</ul>
</blockquote>
<p>‘Team <code>a</code> will be the <strong>champion</strong> of the tournament if there is no team <code>b</code> that is stronger than team <code>a</code>.’ Use <code>count[i]</code> to represent the number of teams stronger than <code>i</code>. The answer is the <code>i</code> with $count[i] &#x3D; 0$.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findChampion</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid.length;</span><br><span class="line">        <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) count[j]++;</span><br><span class="line">                <span class="keyword">else</span> count[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count[i] == <span class="number">0</span>) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="II-Find-Champion-II"><a href="#II-Find-Champion-II" class="headerlink" title="II. Find Champion II"></a>II. <a href="https://leetcode.cn/problems/find-champion-ii/">Find Champion II</a></h1><blockquote>
<p><strong>Problem Description:</strong></p>
<p>There are <code>n</code> teams numbered from <code>0</code> to <code>n - 1</code> in a tournament; each team is also a node in a <strong>DAG</strong>.</p>
<p>You are given the integer <code>n</code> and a <strong>0-indexed</strong> 2D integer array <code>edges</code> of length <code>m</code> representing the <strong>DAG</strong>, where <code>edges[i] = [ui, vi]</code> indicates that there is a directed edge from team <code>ui</code> to team <code>vi</code> in the graph.</p>
<p>A directed edge from <code>a</code> to <code>b</code> in the graph means that team <code>a</code> is <strong>stronger</strong> than team <code>b</code> and team <code>b</code> is <strong>weaker</strong> than team <code>a</code>.</p>
<p>Team <code>a</code> will be the <strong>champion</strong> of the tournament if there is no team <code>b</code> that is <strong>stronger</strong> than team <code>a</code>.</p>
<p>Return <em>the team that will be the <strong>champion</strong> of the tournament if there is a <strong>unique</strong> champion, otherwise, return</em> <code>-1</code><em>.</em></p>
<p><strong>Notes</strong></p>
<ul>
<li>A <strong>cycle</strong> is a series of nodes <code>a1, a2, ..., an, an+1</code> such that node <code>a1</code> is the same node as node <code>an+1</code>, the nodes <code>a1, a2, ..., an</code> are distinct, and there is a directed edge from the node <code>ai</code> to node <code>ai+1</code> for every <code>i</code> in the range <code>[1, n]</code>.</li>
<li>A <strong>DAG</strong> is a directed graph that does not have any <strong>cycle</strong>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2023/10/19/graph-3.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 3, edges = [[0,1],[1,2]]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: Team 1 is weaker than team 0. Team 2 is weaker than team 1. So the champion is team 0.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2023/10/19/graph-4.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 4, edges = [[0,2],[1,3],[1,2]]</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: Team 2 is weaker than team 0 and team 1. Team 3 is weaker than team 1. But team 1 and team 0 are not weaker than any other teams. So the answer is -1.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 100</code></li>
<li><code>m == edges.length</code></li>
<li><code>0 &lt;= m &lt;= n * (n - 1) / 2</code></li>
<li><code>edges[i].length == 2</code></li>
<li><code>0 &lt;= edge[i][j] &lt;= n - 1</code></li>
<li><code>edges[i][0] != edges[i][1]</code></li>
<li>The input is generated such that if team <code>a</code> is stronger than team <code>b</code>, team <code>b</code> is not stronger than team <code>a</code>.</li>
<li>The input is generated such that if team <code>a</code> is stronger than team <code>b</code> and team <code>b</code> is stronger than team <code>c</code>, then team <code>a</code> is stronger than team <code>c</code>.</li>
</ul>
</blockquote>
<p>Use directed edges to represent who is stronger, making it easier to understand than the first problem. Edge $(a,b)$ means <code>a</code> is stronger than <code>b</code>, so the teams with the strongest members have an in-degree of 0. Count the in-degrees.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findChampion</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] inDeg = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="comment">// Count in-degrees</span></span><br><span class="line">        Arrays.stream(edges).forEach(e -&gt; inDeg[e[<span class="number">1</span>]]++);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> Arrays.stream(inDeg).filter(i -&gt; i == <span class="number">0</span>).count();</span><br><span class="line">        <span class="comment">// Not unique</span></span><br><span class="line">        <span class="keyword">if</span> (count != <span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inDeg[i] == <span class="number">0</span>) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="III-Maximum-Score-After-Applying-Operations-on-a-Tree"><a href="#III-Maximum-Score-After-Applying-Operations-on-a-Tree" class="headerlink" title="III. Maximum Score After Applying Operations on a Tree"></a>III. <a href="https://leetcode.cn/problems/maximum-score-after-applying-operations-on-a-tree/">Maximum Score After Applying Operations on a Tree</a></h1><blockquote>
<p><strong>Problem Description:</strong></p>
<p>There is an undirected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>, and rooted at node <code>0</code>. You are given a 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [ai, bi]</code> indicates that there is an edge between nodes <code>ai</code> and <code>bi</code> in the tree.</p>
<p>You are also given a <strong>0-indexed</strong> integer array <code>values</code> of length <code>n</code>, where <code>values[i]</code> is the <strong>value</strong> associated with the <code>ith</code> node.</p>
<p>You start with a score of <code>0</code>. In one operation, you can:</p>
<ul>
<li>Pick any node <code>i</code>.</li>
<li>Add <code>values[i]</code> to your score.</li>
<li>Set <code>values[i]</code> to <code>0</code>.</li>
</ul>
<p>A tree is <strong>healthy</strong> if the sum of values on the path from the root to any leaf node is different than zero.</p>
<p>Return <em>the <strong>maximum score</strong> you can obtain after performing these operations on the tree any number of times so that it remains <strong>healthy</strong>.</em></p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2023/10/11/graph-13-1.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: edges = [[0,1],[0,2],[0,3],[2,4],[4,5]], values = [5,2,5,2,1,1]</span><br><span class="line">Output: 11</span><br><span class="line">Explanation: We can choose nodes 1, 2, 3, 4, and 5. The value of the root is non-zero. Hence, the sum of values on the path from the root to any leaf is different than zero. Therefore, the tree is healthy and the score is values[1] + values[2] + values[3] + values[4] + values[5] = 11.</span><br><span class="line">It can be shown that 11 is the maximum score obtainable after any number of operations on the tree.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2023/10/11/graph-14-2.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], values = [20,10,9,7,4,3,5]</span><br><span class="line">Output: 40</span><br><span class="line">Explanation: We can choose nodes 0, 2, 3, and 4.</span><br><span class="line">- The sum of values on the path from 0 to 4 is equal to 10.</span><br><span class="line">- The sum of values on the path from 0 to 3 is equal to 10.</span><br><span class="line">- The sum of values on the path from 0 to 5 is equal to 3.</span><br><span class="line">- The sum of values on the path from 0 to 6 is equal to 5.</span><br><span class="line">Therefore, the tree is healthy and the score is values[0] + values[2] + values[3] + values[4] = 40.</span><br><span class="line">It can be shown that 40 is the maximum score obtainable after any number of operations on the tree.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>2 &lt;= n &lt;= 2 * 104</code></li>
<li><code>edges.length == n - 1</code></li>
<li><code>edges[i].length == 2</code></li>
<li><code>0 &lt;= ai, bi &lt; n</code></li>
<li><code>values.length == n</code></li>
<li><code>1 &lt;= values[i] &lt;= 109</code></li>
<li>The input is generated such that <code>edges</code> represents a valid tree.</li>
</ul>
</blockquote>
<p>$\forall i, values[i] \ge 1$, and ‘the sum of values on the path from the root to any leaf node is different than zero’. Hence, when performing operations, we must <strong>leave one node untouched on each path from the root to a leaf</strong> (Multiple paths may share one untouched node).</p>
<p>Let the set of all nodes in the graph be $V$, and the set of nodes <strong>left untouched</strong> be $U$. The goal is to maximize the score, which is given by $\sum\limits_{v\in V} v - \sum\limits_{u\in U}u$. $\sum\limits_{v\in V} v$ is simply <code>sum(values)</code>, so to maximize the score, we want to minimize $\sum\limits_{u\in U}u$. Which nodes should we leave untouched?</p>
<p>For any subtree of the tree, such as the one shown below:</p>
<p><img src="/en/MarkDownImages/image-20231105135510005.png" alt="image-20231105135510005"></p>
<p>Assume we do not operate on the root node 0, then all the remaining nodes can be modified; assume we operate on the root node 0, then there exist nodes in the remaining nodes that cannot be modified. Whatever the remaining nodes are, i.e. leaf nodes or multiple subtrees, it doesn’t affect this conclusion.</p>
<p>So when should we operate on the root node? Define <strong>the minimum sum</strong> of <strong>unoperated</strong> nodes in a <strong>healthy</strong> subtree rooted at $u$ as $res(u)$. Then, $\forall x, x$ is a child node of $u$, $res(u) &#x3D; \min\set{values[u], \sum\limits_x res(x)}$</p>
<p>The meaning of this recursive formula is:</p>
<ul>
<li>Either do not operate on the root node $u$, in which case the subtree is healthy, and all descendants can be operated on;</li>
<li>Or operate on the root node $u$, but all subtrees of $u$ must ensure they are healthy;</li>
<li>By the definition, we need to obtain <strong>the minimum sum</strong>, so we take the smaller value of the two situations;</li>
</ul>
<p>For the example above, $res(1) &#x3D; 2,res(2) &#x3D; 2,res(3) &#x3D; 5$</p>
<p>$values[0] &#x3D; 5 &lt; \sum\limits_{x\in\set{1,2,3}}res(x) &#x3D; 9$, so we do not operate on the root node 0 but operate on all nodes in its subtrees.</p>
<p>With the recurrence relation for $res(u)$, the value of $\sum\limits_{u\in U}u$ mentioned earlier is $res(0)$, hence the maximum score is <code>sum(values) - res(0)</code>. </p>
<p>Code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> val, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">            <span class="built_in">this</span>.index = index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Node&gt; children = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        <span class="type">int</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maximumScoreAfterOperations</span><span class="params">(<span class="type">int</span>[][] edges, <span class="type">int</span>[] values)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> values.length;</span><br><span class="line">        <span class="comment">// Build the tree, essentially building a graph</span></span><br><span class="line">        Node[] nodes = IntStream.range(<span class="number">0</span>, n).mapToObj(i -&gt; <span class="keyword">new</span> <span class="title class_">Node</span>(values[i], i)).toArray(Node[]::<span class="keyword">new</span>);</span><br><span class="line">        Arrays.stream(edges).forEach(e -&gt; &#123;</span><br><span class="line">            nodes[e[<span class="number">0</span>]].children.add(nodes[e[<span class="number">1</span>]]);</span><br><span class="line">            nodes[e[<span class="number">1</span>]].children.add(nodes[e[<span class="number">0</span>]]);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        visited[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// values[i] &lt;= 10^9，pay attention to mapToLong</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(values).mapToLong(i -&gt; i).sum();</span><br><span class="line">        <span class="type">long</span> <span class="variable">min</span> <span class="operator">=</span> dfs(nodes[<span class="number">0</span>], visited);</span><br><span class="line">        <span class="keyword">return</span> sum - min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root Root node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> res(root)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">dfs</span><span class="params">(Node root, <span class="type">boolean</span>[] visited)</span> &#123;</span><br><span class="line">        <span class="comment">// count # visited neighbors</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// min = sum(res(children))</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node child : root.children) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[child.index]) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            visited[child.index] = <span class="literal">true</span>;</span><br><span class="line">            min += dfs(child, visited);</span><br><span class="line">            visited[child.index] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// this node is a leaf, return its val directly</span></span><br><span class="line">        <span class="keyword">if</span> (count == root.children.size()) &#123;</span><br><span class="line">            <span class="keyword">return</span> root.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.min(root.val, min);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="IV-Maximum-Balanced-Subsequence-Sum"><a href="#IV-Maximum-Balanced-Subsequence-Sum" class="headerlink" title="IV. Maximum Balanced Subsequence Sum"></a>IV. <a href="https://leetcode.cn/problems/maximum-balanced-subsequence-sum/">Maximum Balanced Subsequence Sum</a></h1><blockquote>
<p><strong>Problem Description:</strong></p>
<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>.</p>
<p>A <strong>subsequence</strong> of <code>nums</code> having length <code>k</code> and consisting of <strong>indices</strong> <code>i0 &lt; i1 &lt; ... &lt; ik-1</code> is <strong>balanced</strong> if the following holds:</p>
<ul>
<li><code>nums[ij] - nums[ij-1] &gt;= ij - ij-1</code>, for every <code>j</code> in the range <code>[1, k - 1]</code>.</li>
</ul>
<p>A <strong>subsequence</strong> of <code>nums</code> having length <code>1</code> is considered balanced.</p>
<p>Return <em>an integer denoting the <strong>maximum</strong> possible <strong>sum of elements</strong> in a <strong>balanced</strong> subsequence of</em> <code>nums</code>.</p>
<p>A <strong>subsequence</strong> of an array is a new <strong>non-empty</strong> array that is formed from the original array by deleting some (<strong>possibly none</strong>) of the elements without disturbing the relative positions of the remaining elements.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,3,5,6]</span><br><span class="line">Output: 14</span><br><span class="line">Explanation: In this example, the subsequence [3,5,6] consisting of indices 0, 2, and 3 can be selected.</span><br><span class="line">nums[2] - nums[0] &gt;= 2 - 0.</span><br><span class="line">nums[3] - nums[2] &gt;= 3 - 2.</span><br><span class="line">Hence, it is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.</span><br><span class="line">The subsequence consisting of indices 1, 2, and 3 is also valid.</span><br><span class="line">It can be shown that it is not possible to get a balanced subsequence with a sum greater than 14.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [5,-1,-3,8]</span><br><span class="line">Output: 13</span><br><span class="line">Explanation: In this example, the subsequence [5,8] consisting of indices 0 and 3 can be selected.</span><br><span class="line">nums[3] - nums[0] &gt;= 3 - 0.</span><br><span class="line">Hence, it is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.</span><br><span class="line">It can be shown that it is not possible to get a balanced subsequence with a sum greater than 13.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [-2,-1]</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: In this example, the subsequence [-1] can be selected.</span><br><span class="line">It is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 105</code></li>
<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>
</ul>
</blockquote>
<p>Let’s change the formulation of the problem: consecutive elements <code>nums[i]</code> and <code>nums[j]</code> in a balanced subsequence must satisfy $i &lt; j$ and $nums[j] - nums[i] \ge j - i$.</p>
<p>By rearranging the inequality above, we get $nums[j] - j \ge nums[i] - i$, which means the requirement for each element in a balanced subsequence only depends on its own value and index, not those of other elements.</p>
<p>Therefore, this problem is similar to the Longest Increasing Subsequence, and we can solve it using DP:</p>
<p>DP Definition: <code>dp[j]</code> represents <strong>the maximum sum</strong> of elements in a <strong>balanced</strong> subsequence <strong>ending at</strong> <code>nums[j]</code>.</p>
<p>Recurrence relation: $dp[j] &#x3D; nums[j] + \max\set{dp[i] | (i &lt; j) ∧ (nums[j] - j \ge nums[i] - i)}$</p>
<p>Code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maxBalancedSubsequenceSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> Long.MIN_VALUE;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// dp[i]: maximum sum of elements in a subsequence ending at nums[i]</span></span><br><span class="line">        <span class="type">long</span>[] dp = <span class="keyword">new</span> <span class="title class_">long</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            dp[j] = nums[j];</span><br><span class="line">            <span class="type">long</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; j; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] - j &gt;= nums[i] - i) &#123;</span><br><span class="line">                    max = Math.max(max, dp[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[j] += max;</span><br><span class="line"></span><br><span class="line">            ans = Math.max(ans, dp[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Obviously, this solution has a time complexity of $O(n^2)$, which is bad. Until end of the contest, I couldn’t figure out an optimization strategy.</p>
<p>I plan to describe in detail how to solve this problem in the next post, based on insights from an expert’s solution. For now, I’ll focus on studying the relevant knowledge.</p>
]]></content>
      <categories>
        <category>Algorithm Problems</category>
        <category>Algorithm Contest</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>Simulation</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Messages for reader</title>
    <url>/en/3000/01/01/%E7%BD%AE%E9%A1%B6%E9%80%9A%E7%9F%A5/</url>
    <content><![CDATA[<ul>
<li>Translation of posts is based on ChatGPT first, and then proofread by me. If there is any ambiguity, please refer to the Chinese version.</li>
<li>Visit the Chinese site <a href="/" onclick="jump()">here</a>, or click ‘Switch to Chinese’ at the left sidebar.</li>
</ul>
<script>
    function jump() {
        window.location.href = "https://el-nino2020.github.io?timestamp=" + (new Date()).getTime();
    }
</script>]]></content>
  </entry>
</search>
